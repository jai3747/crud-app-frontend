name: Complete Secret Scan

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  scan-repository:
    name: 🔍 Full Repository Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for complete scanning
      
      - name: Install scanning tools
        run: |
          # Install TruffleHog
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
          
          # Install gitleaks for additional coverage
          curl -sSfL https://github.com/zricethezav/gitleaks/releases/download/v8.18.1/gitleaks_8.18.1_linux_x64.tar.gz | tar -xzf - -C /tmp
          sudo mv /tmp/gitleaks /usr/local/bin/
          
          # Install needed utilities
          sudo apt-get update && sudo apt-get install -y jq
      
      - name: Create results directory
        run: mkdir -p scan-results
      
      - name: Scan with TruffleHog
        run: |
          # Full git history scan
          echo "Scanning entire git history..."
          trufflehog git file://. \
            --json \
            --no-update > scan-results/trufflehog-git.json || true
          
          # Filesystem scan for current files
          echo "Scanning current files..."
          trufflehog filesystem . \
            --json \
            --no-update > scan-results/trufflehog-fs.json || true
            
          # Ensure files exist
          touch scan-results/trufflehog-git.json scan-results/trufflehog-fs.json
          
          # Safely combine results - one JSON object per line
          cat scan-results/trufflehog-git.json scan-results/trufflehog-fs.json | grep -v "^$" > scan-results/trufflehog-all.json || true
          touch scan-results/trufflehog-all.json
          
          # Count results
          TOTAL=$(grep -c . scan-results/trufflehog-all.json || echo "0")
          echo "TruffleHog found $TOTAL potential secrets"
      
      - name: Scan with Gitleaks
        run: |
          # Scan repo with gitleaks - force non-zero exit
          echo "Running Gitleaks scan..."
          gitleaks detect --source . --report-format json --report-path scan-results/gitleaks-results.json || true
          
          # Ensure file exists
          touch scan-results/gitleaks-results.json
          
          # Format the results consistently, handling empty files
          if [ -s "scan-results/gitleaks-results.json" ]; then
            # Check if the file starts with '[' indicating proper JSON array
            if [[ $(head -c 1 scan-results/gitleaks-results.json) == "[" ]]; then
              cat scan-results/gitleaks-results.json | jq -c '.[] | {
                "DetectorName": (.RuleID // "UnknownRule"),
                "SourceMetadata": {
                  "Data": {
                    "Filesystem": {
                      "file": (.File // "UnknownFile"),
                      "line": (.StartLine // 0)
                    }
                  }
                },
                "Raw": (.Secret // "Redacted"),
                "Verified": true
              }' > scan-results/gitleaks-formatted.json 2>/dev/null || echo "[]" > scan-results/gitleaks-formatted.json
            else
              echo "[]" > scan-results/gitleaks-formatted.json
            fi
          else
            echo "[]" > scan-results/gitleaks-formatted.json
          fi
      
      - name: Scan specific sensitive files
        run: |
          echo "Scanning for specific sensitive patterns..."
          
          # Create empty result file
          echo "[]" > scan-results/sensitive-results.json
          
          # Look for common sensitive files
          find . -type f \( -name "*.env*" -o -name "*.pem" -o -name "*.key" -o -name "*config*.json" -o -name "*config*.js" -o -name "*secret*" \) -not -path "*/node_modules/*" -not -path "*/.git/*" > scan-results/sensitive-files.txt || true
          
          # Create empty file in case find fails
          touch scan-results/sensitive-files.txt
          
          # Only process if we found matching files and the file isn't empty
          if [ -s scan-results/sensitive-files.txt ]; then
            # Process each file
            while read -r file; do
              if [ -f "$file" ]; then
                # Check for common secret patterns
                if grep -q -E "api[_\-]?key|secret|password|token|credential|private[_\-]?key|auth" "$file" 2>/dev/null; then
                  # Find line number of first match
                  LINE=$(grep -n -E "api[_\-]?key|secret|password|token|credential|private[_\-]?key|auth" "$file" 2>/dev/null | head -1 | cut -d: -f1 || echo "1")
                  
                  # Generate a finding record
                  echo "{
                    \"DetectorName\": \"SensitiveFile\",
                    \"SourceMetadata\": {
                      \"Data\": {
                        \"Filesystem\": {
                          \"file\": \"${file//\"/\\\"}\",
                          \"line\": ${LINE:-1}
                        }
                      }
                    },
                    \"Raw\": \"REDACTED\",
                    \"Verified\": false
                  }" >> scan-results/sensitive-results.json
                fi
              fi
            done < scan-results/sensitive-files.txt
          fi
      
      - name: Combine all results
        run: |
          echo "Combining all scanning results..."
          
          # Ensure files exist
          touch scan-results/trufflehog-all.json scan-results/gitleaks-formatted.json scan-results/sensitive-results.json
          
          # Create a directory for processed files
          mkdir -p scan-results/processed
          
          # Process each file to ensure valid JSON objects
          for file in scan-results/trufflehog-all.json scan-results/gitleaks-formatted.json scan-results/sensitive-results.json; do
            # Create corresponding output file
            output_file="scan-results/processed/$(basename $file)"
            touch "$output_file"
            
            # Process non-empty files line by line
            if [ -s "$file" ]; then
              while IFS= read -r line || [ -n "$line" ]; do
                # Only process non-empty lines
                if [ -n "$line" ]; then
                  # Check if line is valid JSON
                  if echo "$line" | jq '.' > /dev/null 2>&1; then
                    echo "$line" >> "$output_file"
                  fi
                fi
              done < "$file"
            fi
          done
          
          # Combine processed results
          cat scan-results/processed/*.json > scan-results/all-secrets.json || true
          touch scan-results/all-secrets.json
          
          # Count results
          TOTAL=$(grep -c . scan-results/all-secrets.json || echo "0")
          # Count verified secrets
          VERIFIED=$(grep -c '"Verified":true' scan-results/all-secrets.json || echo "0")
          
          # Extract unique files (handle JSON structure properly)
          cat scan-results/all-secrets.json | jq -r '.SourceMetadata.Data.Filesystem.file // .SourceMetadata.Data.Git.file' 2>/dev/null | grep -v '^null$' | grep -v '^$' | sort | uniq > scan-results/affected-files.txt || touch scan-results/affected-files.txt
          FILES=$(wc -l < scan-results/affected-files.txt | xargs || echo "0")
          
          echo "Found $TOTAL potential secrets in $FILES files ($VERIFIED verified)"
          
          if [ "$TOTAL" -gt 0 ]; then
            echo "::warning::Found $TOTAL potential secrets in $FILES files!"
          fi
      
      - name: Generate simple report
        run: |
          echo "=========================" > scan-results/simple-report.txt
          echo "SECURITY SCAN REPORT" >> scan-results/simple-report.txt
          echo "=========================" >> scan-results/simple-report.txt
          echo "Scan date: $(date)" >> scan-results/simple-report.txt
          echo "" >> scan-results/simple-report.txt
          
          # Count findings
          TOTAL=$(grep -c . scan-results/all-secrets.json || echo "0")
          VERIFIED=$(grep -c '"Verified":true' scan-results/all-secrets.json || echo "0")
          FILES=$(wc -l < scan-results/affected-files.txt | xargs || echo "0")
          
          if [ "$TOTAL" -gt 0 ]; then
            echo "⚠️ FOUND $TOTAL POTENTIAL SECRETS ($VERIFIED VERIFIED)" >> scan-results/simple-report.txt
            echo "" >> scan-results/simple-report.txt
            
            echo "TOP FILES WITH SECRETS:" >> scan-results/simple-report.txt
            echo "----------------------" >> scan-results/simple-report.txt
            
            # Create counts of secrets per file (safely)
            cat scan-results/all-secrets.json | jq -r '.SourceMetadata.Data.Filesystem.file // .SourceMetadata.Data.Git.file' 2>/dev/null | 
              grep -v '^null$' | grep -v '^$' | sort | uniq -c | sort -nr | head -10 > scan-results/file-stats.txt || true
            
            # Format the output
            while read -r line; do
              count=$(echo "$line" | awk '{print $1}')
              file=$(echo "$line" | cut -d' ' -f2-)
              if [ -n "$file" ] && [ "$file" != "null" ]; then
                echo "• $file ($count issues)" >> scan-results/simple-report.txt
              fi
            done < scan-results/file-stats.txt
            
            echo "" >> scan-results/simple-report.txt
            
            echo "SECRET TYPES FOUND:" >> scan-results/simple-report.txt
            echo "-----------------" >> scan-results/simple-report.txt
            
            # Create counts of detector types (safely)
            cat scan-results/all-secrets.json | jq -r '.DetectorName' 2>/dev/null | 
              grep -v '^null$' | grep -v '^$' | sort | uniq -c | sort -nr > scan-results/detector-stats.txt || true
            
            # Format the output
            while read -r line; do
              count=$(echo "$line" | awk '{print $1}')
              type=$(echo "$line" | cut -d' ' -f2-)
              if [ -n "$type" ] && [ "$type" != "null" ]; then
                echo "• $type: $count" >> scan-results/simple-report.txt
              fi
            done < scan-results/detector-stats.txt
            
            echo "" >> scan-results/simple-report.txt
            
            echo "DETAILED FINDINGS (SAMPLE):" >> scan-results/simple-report.txt
            echo "-------------------------" >> scan-results/simple-report.txt
            
            # For large result sets, limit to a sample
            if [ "$TOTAL" -gt 50 ]; then
              head -50 scan-results/all-secrets.json > scan-results/sample-secrets.json
              echo "Showing 50 out of $TOTAL findings. See detailed report for full list." >> scan-results/simple-report.txt
              echo "" >> scan-results/simple-report.txt
            else
              cp scan-results/all-secrets.json scan-results/sample-secrets.json
            fi
            
            # Process each sample finding
            cat scan-results/sample-secrets.json | while read -r line; do
              if [ -n "$line" ]; then
                # Extract data safely
                TYPE=$(echo "$line" | jq -r '.DetectorName // "Unknown"' 2>/dev/null || echo "Unknown")
                VERIFIED=$(echo "$line" | jq -r '.Verified // false' 2>/dev/null || echo "false")
                
                # Get file and line info
                FILE=$(echo "$line" | jq -r '.SourceMetadata.Data.Filesystem.file // .SourceMetadata.Data.Git.file // "Unknown"' 2>/dev/null || echo "Unknown")
                LINE=$(echo "$line" | jq -r '.SourceMetadata.Data.Filesystem.line // .SourceMetadata.Data.Git.line // "?"' 2>/dev/null || echo "?")
                
                # Format verification status
                if [ "$VERIFIED" = "true" ]; then
                  STATUS="✓ VERIFIED"
                else
                  STATUS="POTENTIAL"
                fi
                
                echo "→ $TYPE in $FILE (line $LINE) - $STATUS" >> scan-results/simple-report.txt
              fi
            done
          else
            echo "✅ NO SECRETS FOUND" >> scan-results/simple-report.txt
          fi
          
          # Add recommendations
          echo "" >> scan-results/simple-report.txt
          echo "HOW TO FIX:" >> scan-results/simple-report.txt
          echo "----------" >> scan-results/simple-report.txt
          echo "1. Remove credentials from code" >> scan-results/simple-report.txt
          echo "2. Add sensitive files to .gitignore" >> scan-results/simple-report.txt
          echo "3. Use environment variables for secrets" >> scan-results/simple-report.txt
          echo "4. Rotate any exposed credentials" >> scan-results/simple-report.txt
      
      - name: Generate detailed HTML report
        run: |
          cat > scan-results/detailed-report.html << 'EOL'
<!DOCTYPE html>
<html>
<head>
  <title>Security Scan Report</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 20px; line-height: 1.6; }
    table { border-collapse: collapse; width: 100%; margin-bottom: 20px; }
    th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
    th { background-color: #f2f2f2; }
    .verified { background-color: #ffdddd; }
    .potential { background-color: #ffffdd; }
    h1, h2, h3 { color: #333; }
    .summary { background-color: #f8f8f8; padding: 15px; border-radius: 5px; margin-bottom: 20px; }
    .high { color: red; font-weight: bold; }
    .medium { color: orange; }
  </style>
</head>
<body>
  <h1>Security Scan Report</h1>
  <p>Scan date: SCAN_DATE_PLACEHOLDER</p>
  
  <div class="summary">
EOL
          
          # Replace the date placeholder
          sed -i "s/SCAN_DATE_PLACEHOLDER/$(date)/" scan-results/detailed-report.html
          
          # Add summary section
          TOTAL=$(grep -c . scan-results/all-secrets.json || echo "0")
          VERIFIED=$(grep -c '"Verified":true' scan-results/all-secrets.json || echo "0")
          FILES=$(wc -l < scan-results/affected-files.txt | xargs || echo "0")
          
          if [ "$TOTAL" -gt 0 ]; then
            echo "<h2>🚨 Found $TOTAL potential secrets in $FILES files</h2>" >> scan-results/detailed-report.html
            echo "<p><span class='high'>$VERIFIED verified secrets</span> require immediate attention.</p>" >> scan-results/detailed-report.html
          else
            echo "<h2>✅ No secrets found</h2>" >> scan-results/detailed-report.html
            echo "<p>Your code appears to be free from exposed secrets and credentials.</p>" >> scan-results/detailed-report.html
          fi
          
          echo "</div>" >> scan-results/detailed-report.html
          
          # Only add details if we found secrets
          if [ "$TOTAL" -gt 0 ]; then
            # Add file summary
            echo "<h3>Files with Secrets:</h3>" >> scan-results/detailed-report.html
            echo "<table>" >> scan-results/detailed-report.html
            echo "<tr><th>File</th><th>Issues</th><th>Verified</th></tr>" >> scan-results/detailed-report.html
            
            # Process each file with issues
            cat scan-results/file-stats.txt | head -25 | while read -r line; do
              count=$(echo "$line" | awk '{print $1}')
              file=$(echo "$line" | cut -d' ' -f2-)
              
              if [ -n "$file" ] && [ "$file" != "null" ]; then
                # Count verified issues for this file
                verified_count=$(cat scan-results/all-secrets.json | grep -F "\"$file\"" | grep -c '"Verified":true' || echo "0")
                
                # Add row to table
                echo "<tr>" >> scan-results/detailed-report.html
                echo "<td>$file</td>" >> scan-results/detailed-report.html
                echo "<td>$count</td>" >> scan-results/detailed-report.html
                
                if [ "$verified_count" -gt 0 ]; then
                  echo "<td class='high'>$verified_count</td>" >> scan-results/detailed-report.html
                else
                  echo "<td>0</td>" >> scan-results/detailed-report.html
                fi
                
                echo "</tr>" >> scan-results/detailed-report.html
              fi
            done
            
            echo "</table>" >> scan-results/detailed-report.html
            
            # Add detector type summary
            echo "<h3>Types of Secrets Found:</h3>" >> scan-results/detailed-report.html
            echo "<table>" >> scan-results/detailed-report.html
            echo "<tr><th>Detector</th><th>Count</th><th>Verified</th></tr>" >> scan-results/detailed-report.html
            
            cat scan-results/detector-stats.txt | while read -r line; do
              count=$(echo "$line" | awk '{print $1}')
              type=$(echo "$line" | cut -d' ' -f2-)
              
              if [ -n "$type" ] && [ "$type" != "null" ]; then
                # Count verified issues for this type
                verified_count=$(cat scan-results/all-secrets.json | grep -F "\"$type\"" | grep -c '"Verified":true' || echo "0")
                
                # Add row to table
                echo "<tr>" >> scan-results/detailed-report.html
                echo "<td>$type</td>" >> scan-results/detailed-report.html
                echo "<td>$count</td>" >> scan-results/detailed-report.html
                
                if [ "$verified_count" -gt 0 ]; then
                  echo "<td class='high'>$verified_count</td>" >> scan-results/detailed-report.html
                else
                  echo "<td>0</td>" >> scan-results/detailed-report.html
                fi
                
                echo "</tr>" >> scan-results/detailed-report.html
              fi
            done
            
            echo "</table>" >> scan-results/detailed-report.html
            
            # Add detailed findings (limit for large result sets)
            echo "<h3>Detailed Findings:</h3>" >> scan-results/detailed-report.html
            
            if [ "$TOTAL" -gt 200 ]; then
              echo "<p>Showing first 200 of $TOTAL findings.</p>" >> scan-results/detailed-report.html
              head -200 scan-results/all-secrets.json > scan-results/html-sample.json
            else
              cp scan-results/all-secrets.json scan-results/html-sample.json
            fi
            
            echo "<table>" >> scan-results/detailed-report.html
            echo "<tr><th>Type</th><th>File</th><th>Line</th><th>Status</th></tr>" >> scan-results/detailed-report.html
            
            # Process each finding (limited sample)
            cat scan-results/html-sample.json | while read -r line; do
              if [ -n "$line" ]; then
                # Extract data safely using echo+grep to avoid jq errors
                TYPE=$(echo "$line" | jq -r '.DetectorName // "Unknown"' 2>/dev/null || echo "Unknown")
                VERIFIED=$(echo "$line" | jq -r '.Verified // false' 2>/dev/null || echo "false")
                
                FILE=$(echo "$line" | jq -r '.SourceMetadata.Data.Filesystem.file // .SourceMetadata.Data.Git.file // "Unknown"' 2>/dev/null || echo "Unknown")
                LINE=$(echo "$line" | jq -r '.SourceMetadata.Data.Filesystem.line // .SourceMetadata.Data.Git.line // "?"' 2>/dev/null || echo "?")
                
                # Set row class and status
                if [ "$VERIFIED" = "true" ]; then
                  CLASS="verified"
                  STATUS="<span class='high'>VERIFIED</span>"
                else
                  CLASS="potential"
                  STATUS="<span class='medium'>POTENTIAL</span>"
                fi
                
                # Add row to table
                echo "<tr class='$CLASS'>" >> scan-results/detailed-report.html
                echo "<td>$TYPE</td>" >> scan-results/detailed-report.html
                echo "<td>$FILE</td>" >> scan-results/detailed-report.html
                echo "<td>$LINE</td>" >> scan-results/detailed-report.html
                echo "<td>$STATUS</td>" >> scan-results/detailed-report.html
                echo "</tr>" >> scan-results/detailed-report.html
              fi
            done
            
            echo "</table>" >> scan-results/detailed-report.html
            
            # Add remediation advice
            echo "<h3>How to Fix These Issues:</h3>" >> scan-results/detailed-report.html
            echo "<ol>" >> scan-results/detailed-report.html
            echo "<li><strong>Remove all credentials</strong> from your code and configuration files</li>" >> scan-results/detailed-report.html
            echo "<li><strong>Use environment variables</strong> for all sensitive information</li>" >> scan-results/detailed-report.html
            echo "<li><strong>Add sensitive files</strong> (.env, config files with credentials) to .gitignore</li>" >> scan-results/detailed-report.html
            echo "<li><strong>Rotate any exposed credentials</strong> immediately</li>" >> scan-results/detailed-report.html
            echo "<li><strong>Consider using a secret manager</strong> for your production environment</li>" >> scan-results/detailed-report.html
            echo "</ol>" >> scan-results/detailed-report.html
          fi
          
          echo "</body></html>" >> scan-results/detailed-report.html

      - name: Upload scan reports
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-reports
          path: |
            scan-results/simple-report.txt
            scan-results/detailed-report.html
            scan-results/all-secrets.json
          retention-days: 30
