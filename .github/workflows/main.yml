name: TruffleHog Comprehensive Secret Scanning

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sunday at midnight
  workflow_dispatch:  # Allow manual triggering

jobs:
  secret-scan:
    name: 🔍 Complete Secret Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repo: 
          - {name: 'frontend', path: 'jai3747/crud-app-frontend'}
          - {name: 'backend', path: 'jai3747/crud-app-backend'}
      fail-fast: false
    
    steps:
      - name: Clean workspace
        run: |
          rm -rf * 
          rm -rf .git
        
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          repository: ${{ matrix.repo.path }}
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0  # Full history
          clean: true
          force: true
      
      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
        
      - name: TruffleHog Direct Scan
        id: trufflehog_scan
        run: |
          # Install TruffleHog
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin

          # Run both git and filesystem scans to catch all secrets
          echo "Running git history scan..."
          trufflehog git file://. --json --no-update --include-detectors all > git-scan-results.json || true
          
          echo "Running filesystem scan (including .env files)..."
          trufflehog filesystem --directory=. --json --include-detectors all > fs-scan-results.json || true
          
          # Combine results
          echo "Combining results..."
          cat git-scan-results.json fs-scan-results.json > all-results.json
          
          # Create report
          echo "# Secret Scanning Report for ${{ matrix.repo.path }}" > secret-report.md
          echo "Scan completed on: $(date)" >> secret-report.md
          echo "" >> secret-report.md
          
          if [ -s all-results.json ]; then
            # Count unique secrets
            SECRET_COUNT=$(cat all-results.json | grep -v "^$" | wc -l)
            echo "## ⚠️ $SECRET_COUNT potential secrets found!" >> secret-report.md
            echo "" >> secret-report.md
            
            # Create a details table
            echo "| Secret Type | Source | File | Line | Severity |" >> secret-report.md
            echo "|------------|--------|------|------|----------|" >> secret-report.md
            
            # Process each finding
            cat all-results.json | grep -v "^$" | while read -r line; do
              DETECTOR=$(echo $line | jq -r '.DetectorType // "Unknown"')
              SOURCE=$(echo $line | jq -r '.SourceType // "Unknown"')
              FILE=$(echo $line | jq -r '.SourceMetadata.Data.Filename // .SourceMetadata.Data.Path // "Unknown"')
              LINE=$(echo $line | jq -r '.SourceMetadata.Data.Line // "N/A"')
              VERIFIED=$(echo $line | jq -r '.Verified // false')
              
              # Determine severity
              if [ "$VERIFIED" = "true" ]; then
                SEVERITY="🔴 High"
              else
                SEVERITY="🟡 Medium"
              fi
              
              echo "| $DETECTOR | $SOURCE | $FILE | $LINE | $SEVERITY |" >> secret-report.md
            done
            
            echo "" >> secret-report.md
            echo "## 🚨 Remediation Steps" >> secret-report.md
            echo "" >> secret-report.md
            echo "1. **Remove all hardcoded secrets** from your codebase, including .env files that might be committed" >> secret-report.md
            echo "2. **Revoke all exposed credentials** immediately" >> secret-report.md
            echo "3. **Replace with environment variables** or a secure secret management system" >> secret-report.md
            echo "4. **Add .env files to .gitignore** to prevent future commits" >> secret-report.md
            echo "5. **Consider using git-filter-repo** to remove secrets from git history" >> secret-report.md
            
            echo "secrets_found=true" >> $GITHUB_OUTPUT
            echo "::warning::$SECRET_COUNT potential secrets found in ${{ matrix.repo.path }}"
          else
            echo "## ✅ No secrets found" >> secret-report.md
            echo "" >> secret-report.md
            echo "No secrets or credentials were detected in this repository." >> secret-report.md
            echo "secrets_found=false" >> $GITHUB_OUTPUT
          fi
        
      - name: Upload Raw Results
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.repo.name }}-raw-results
          path: all-results.json
          retention-days: 30
          
      - name: Upload Report
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.repo.name }}-secret-report
          path: secret-report.md
          retention-days: 30
        
      - name: Fail if verified secrets found
        if: steps.trufflehog_scan.outputs.secrets_found == 'true'
        run: |
          echo "::error::Secrets found in ${{ matrix.repo.path }}! Check the artifacts for details."
          echo "Displaying the first few findings:"
          head -n 10 all-results.json
          exit 1
  
  summary-report:
    name: 📊 Summary Report
    needs: secret-scan
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-reports
          
      - name: Generate summary report
        run: |
          echo "# 🔒 Secret Scanning Summary" > summary-report.md
          echo "Generated: $(date)" >> summary-report.md
          echo "" >> summary-report.md
          
          # Check Frontend
          if [ -s "all-reports/frontend-raw-results/all-results.json" ]; then
            FRONTEND_COUNT=$(cat all-reports/frontend-raw-results/all-results.json | grep -v "^$" | wc -l)
            echo "## Frontend Repository: ⚠️ $FRONTEND_COUNT potential secrets found" >> summary-report.md
            echo "📋 [View detailed report](../artifact/frontend-secret-report/secret-report.md)" >> summary-report.md
          else
            echo "## Frontend Repository: ✅ No secrets found" >> summary-report.md
          fi
          
          echo "" >> summary-report.md
          
          # Check Backend
          if [ -s "all-reports/backend-raw-results/all-results.json" ]; then
            BACKEND_COUNT=$(cat all-reports/backend-raw-results/all-results.json | grep -v "^$" | wc -l)
            echo "## Backend Repository: ⚠️ $BACKEND_COUNT potential secrets found" >> summary-report.md
            echo "📋 [View detailed report](../artifact/backend-secret-report/secret-report.md)" >> summary-report.md
          else
            echo "## Backend Repository: ✅ No secrets found" >> summary-report.md
          fi
          
          echo "" >> summary-report.md
          echo "## Next Steps" >> summary-report.md
          echo "" >> summary-report.md
          echo "- Review all findings in the detailed reports" >> summary-report.md
          echo "- Remove all hardcoded secrets and credentials" >> summary-report.md
          echo "- Use environment variables or secret management tools" >> summary-report.md
          echo "- Update your .gitignore to prevent committing sensitive files" >> summary-report.md
          
      - name: Upload Summary Report
        uses: actions/upload-artifact@v4
        with:
          name: secret-scan-summary
          path: summary-report.md
          retention-days: 30
