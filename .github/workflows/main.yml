# # # # name: TruffleHog Comprehensive Secret Scanning

# # # # on:
# # # #   push:
# # # #     branches: [ main, master ]
# # # #   pull_request:
# # # #     branches: [ main, master ]
# # # #   schedule:
# # # #     - cron: '0 0 * * 0'  # Run weekly on Sunday at midnight
# # # #   workflow_dispatch:  # Allow manual triggering

# # # # jobs:
# # # #   secret-scan:
# # # #     name: üîç Complete Secret Scan
# # # #     runs-on: ubuntu-latest
# # # #     strategy:
# # # #       matrix:
# # # #         repo: 
# # # #           - {name: 'frontend', path: 'jai3747/crud-app-frontend'}
# # # #           - {name: 'backend', path: 'jai3747/crud-app-backend'}
# # # #       fail-fast: false
    
# # # #     steps:
# # # #       - name: Clean workspace
# # # #         run: |
# # # #           rm -rf * 
# # # #           rm -rf .git
        
# # # #       - name: Checkout Code
# # # #         uses: actions/checkout@v4
# # # #         with:
# # # #           repository: ${{ matrix.repo.path }}
# # # #           token: ${{ secrets.GH_PAT }}
# # # #           fetch-depth: 0  # Full history
# # # #           clean: true
# # # #           force: true
      
# # # #       - name: Install jq
# # # #         run: |
# # # #           sudo apt-get update
# # # #           sudo apt-get install -y jq
        
# # # #       - name: TruffleHog Direct Scan
# # # #         id: trufflehog_scan
# # # #         run: |
# # # #           # Install TruffleHog
# # # #           curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin

# # # #           # Run both git and filesystem scans to catch all secrets
# # # #           echo "Running git history scan..."
# # # #           trufflehog git file://. --json --no-update --include-detectors all > git-scan-results.json || true
          
# # # #           echo "Running filesystem scan (including .env files)..."
# # # #           trufflehog filesystem --directory=. --json --include-detectors all > fs-scan-results.json || true
          
# # # #           # Combine results
# # # #           echo "Combining results..."
# # # #           cat git-scan-results.json fs-scan-results.json > all-results.json
          
# # # #           # Create report
# # # #           echo "# Secret Scanning Report for ${{ matrix.repo.path }}" > secret-report.md
# # # #           echo "Scan completed on: $(date)" >> secret-report.md
# # # #           echo "" >> secret-report.md
          
# # # #           if [ -s all-results.json ]; then
# # # #             # Count unique secrets
# # # #             SECRET_COUNT=$(cat all-results.json | grep -v "^$" | wc -l)
# # # #             echo "## ‚ö†Ô∏è $SECRET_COUNT potential secrets found!" >> secret-report.md
# # # #             echo "" >> secret-report.md
            
# # # #             # Create a details table
# # # #             echo "| Secret Type | Source | File | Line | Severity |" >> secret-report.md
# # # #             echo "|------------|--------|------|------|----------|" >> secret-report.md
            
# # # #             # Process each finding
# # # #             cat all-results.json | grep -v "^$" | while read -r line; do
# # # #               DETECTOR=$(echo $line | jq -r '.DetectorType // "Unknown"')
# # # #               SOURCE=$(echo $line | jq -r '.SourceType // "Unknown"')
# # # #               FILE=$(echo $line | jq -r '.SourceMetadata.Data.Filename // .SourceMetadata.Data.Path // "Unknown"')
# # # #               LINE=$(echo $line | jq -r '.SourceMetadata.Data.Line // "N/A"')
# # # #               VERIFIED=$(echo $line | jq -r '.Verified // false')
              
# # # #               # Determine severity
# # # #               if [ "$VERIFIED" = "true" ]; then
# # # #                 SEVERITY="üî¥ High"
# # # #               else
# # # #                 SEVERITY="üü° Medium"
# # # #               fi
              
# # # #               echo "| $DETECTOR | $SOURCE | $FILE | $LINE | $SEVERITY |" >> secret-report.md
# # # #             done
            
# # # #             echo "" >> secret-report.md
# # # #             echo "## üö® Remediation Steps" >> secret-report.md
# # # #             echo "" >> secret-report.md
# # # #             echo "1. **Remove all hardcoded secrets** from your codebase, including .env files that might be committed" >> secret-report.md
# # # #             echo "2. **Revoke all exposed credentials** immediately" >> secret-report.md
# # # #             echo "3. **Replace with environment variables** or a secure secret management system" >> secret-report.md
# # # #             echo "4. **Add .env files to .gitignore** to prevent future commits" >> secret-report.md
# # # #             echo "5. **Consider using git-filter-repo** to remove secrets from git history" >> secret-report.md
            
# # # #             echo "secrets_found=true" >> $GITHUB_OUTPUT
# # # #             echo "::warning::$SECRET_COUNT potential secrets found in ${{ matrix.repo.path }}"
# # # #           else
# # # #             echo "## ‚úÖ No secrets found" >> secret-report.md
# # # #             echo "" >> secret-report.md
# # # #             echo "No secrets or credentials were detected in this repository." >> secret-report.md
# # # #             echo "secrets_found=false" >> $GITHUB_OUTPUT
# # # #           fi
        
# # # #       - name: Upload Raw Results
# # # #         uses: actions/upload-artifact@v4
# # # #         with:
# # # #           name: ${{ matrix.repo.name }}-raw-results
# # # #           path: all-results.json
# # # #           retention-days: 30
          
# # # #       - name: Upload Report
# # # #         uses: actions/upload-artifact@v4
# # # #         with:
# # # #           name: ${{ matrix.repo.name }}-secret-report
# # # #           path: secret-report.md
# # # #           retention-days: 30
        
# # # #       - name: Fail if verified secrets found
# # # #         if: steps.trufflehog_scan.outputs.secrets_found == 'true'
# # # #         run: |
# # # #           echo "::error::Secrets found in ${{ matrix.repo.path }}! Check the artifacts for details."
# # # #           echo "Displaying the first few findings:"
# # # #           head -n 10 all-results.json
# # # #           exit 1
  
# # # #   summary-report:
# # # #     name: üìä Summary Report
# # # #     needs: secret-scan
# # # #     runs-on: ubuntu-latest
# # # #     if: always()
# # # #     steps:
# # # #       - name: Download all artifacts
# # # #         uses: actions/download-artifact@v4
# # # #         with:
# # # #           path: all-reports
          
# # # #       - name: Generate summary report
# # # #         run: |
# # # #           echo "# üîí Secret Scanning Summary" > summary-report.md
# # # #           echo "Generated: $(date)" >> summary-report.md
# # # #           echo "" >> summary-report.md
          
# # # #           # Check Frontend
# # # #           if [ -s "all-reports/frontend-raw-results/all-results.json" ]; then
# # # #             FRONTEND_COUNT=$(cat all-reports/frontend-raw-results/all-results.json | grep -v "^$" | wc -l)
# # # #             echo "## Frontend Repository: ‚ö†Ô∏è $FRONTEND_COUNT potential secrets found" >> summary-report.md
# # # #             echo "üìã [View detailed report](../artifact/frontend-secret-report/secret-report.md)" >> summary-report.md
# # # #           else
# # # #             echo "## Frontend Repository: ‚úÖ No secrets found" >> summary-report.md
# # # #           fi
          
# # # #           echo "" >> summary-report.md
          
# # # #           # Check Backend
# # # #           if [ -s "all-reports/backend-raw-results/all-results.json" ]; then
# # # #             BACKEND_COUNT=$(cat all-reports/backend-raw-results/all-results.json | grep -v "^$" | wc -l)
# # # #             echo "## Backend Repository: ‚ö†Ô∏è $BACKEND_COUNT potential secrets found" >> summary-report.md
# # # #             echo "üìã [View detailed report](../artifact/backend-secret-report/secret-report.md)" >> summary-report.md
# # # #           else
# # # #             echo "## Backend Repository: ‚úÖ No secrets found" >> summary-report.md
# # # #           fi
          
# # # #           echo "" >> summary-report.md
# # # #           echo "## Next Steps" >> summary-report.md
# # # #           echo "" >> summary-report.md
# # # #           echo "- Review all findings in the detailed reports" >> summary-report.md
# # # #           echo "- Remove all hardcoded secrets and credentials" >> summary-report.md
# # # #           echo "- Use environment variables or secret management tools" >> summary-report.md
# # # #           echo "- Update your .gitignore to prevent committing sensitive files" >> summary-report.md
          
# # # #       - name: Upload Summary Report
# # # #         uses: actions/upload-artifact@v4
# # # #         with:
# # # #           name: secret-scan-summary
# # # #           path: summary-report.md
# # # #           retention-days: 30
# # # name: TruffleHog Secret Scanning

# # # on:
# # #   push:
# # #     branches: [ main, master ]
# # #   pull_request:
# # #     branches: [ main, master ]
# # #   schedule:
# # #     - cron: '0 0 * * 0'  # Run weekly on Sunday at midnight
# # #   workflow_dispatch:  # Allow manual triggering

# # # jobs:
# # #   secret-scan:
# # #     name: üîç Secret Scan
# # #     runs-on: ubuntu-latest
# # #     strategy:
# # #       matrix:
# # #         repo: 
# # #           - {name: 'frontend', path: 'jai3747/crud-app-frontend'}
# # #           - {name: 'backend', path: 'jai3747/crud-app-backend'}
# # #       fail-fast: false
    
# # #     steps:
# # #       - name: Clean workspace
# # #         run: |
# # #           rm -rf * 
# # #           rm -rf .git
        
# # #       - name: Checkout Code
# # #         uses: actions/checkout@v4
# # #         with:
# # #           repository: ${{ matrix.repo.path }}
# # #           token: ${{ secrets.GH_PAT }}
# # #           fetch-depth: 0  # Full history
# # #           clean: true
# # #           force: true
      
# # #       - name: Install dependencies
# # #         run: |
# # #           sudo apt-get update
# # #           sudo apt-get install -y jq
        
# # #       - name: Run TruffleHog Scan
# # #         id: trufflehog_scan
# # #         run: |
# # #           # Install TruffleHog
# # #           curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin

# # #           # Create .trufflehog-ignore file to exclude false positives
# # #           cat << EOF > .trufflehog-ignore
# # #           node_modules/
# # #           **/test/**
# # #           **/tests/**
# # #           **/docs/**
# # #           **/examples/**
# # #           **/*.md
# # #           EOF
          
# # #           # Create output directories
# # #           mkdir -p scan-results
          
# # #           # Run git scan with ignore patterns
# # #           echo "Running git history scan..."
# # #           trufflehog git file://. \
# # #             --json \
# # #             --no-update \
# # #             --include-detectors all \
# # #             --exclude-paths .trufflehog-ignore > scan-results/git-scan-results.json || true
          
# # #           # Run filesystem scan focusing on important files
# # #           echo "Running filesystem scan for sensitive files..."
# # #           trufflehog filesystem \
# # #             --directory=. \
# # #             --json \
# # #             --include-detectors all \
# # #             --exclude-paths .trufflehog-ignore \
# # #             --include-paths "**/.env,**/.env.*,**/config.*,**/*.config.js,**/*.yml,**/*.yaml,**/*.json" > scan-results/fs-scan-results.json || true
          
# # #           # Combine and filter results (only include non-empty lines)
# # #           echo "Processing results..."
# # #           cat scan-results/git-scan-results.json scan-results/fs-scan-results.json | grep -v "^$" > scan-results/all-raw-results.json
          
# # #           # Filter out false positives and create clean results
# # #           cat scan-results/all-raw-results.json | jq -c '
# # #             select(
# # #               (.SourceMetadata.Data.Filesystem.file | contains("node_modules") | not) and
# # #               (.SourceMetadata.Data.Git.file | contains("node_modules") | not)
# # #             )
# # #           ' > scan-results/cleaned-results.json
          
# # #           # Count results - empty file check
# # #           if [ ! -s scan-results/cleaned-results.json ]; then
# # #             echo "secrets_found=false" >> $GITHUB_OUTPUT
# # #             echo "verified_secrets_found=0" >> $GITHUB_OUTPUT
# # #             echo "total_secrets=0" >> $GITHUB_OUTPUT
# # #             echo "::notice::No secrets found in ${{ matrix.repo.name }} repository."
# # #           else
# # #             # Count total and verified secrets
# # #             TOTAL_COUNT=$(cat scan-results/cleaned-results.json | grep -v "^$" | wc -l)
# # #             VERIFIED_COUNT=$(cat scan-results/cleaned-results.json | grep -v "^$" | grep -c '"Verified":true' || echo "0")
            
# # #             echo "secrets_found=true" >> $GITHUB_OUTPUT
# # #             echo "verified_secrets_found=$VERIFIED_COUNT" >> $GITHUB_OUTPUT
# # #             echo "total_secrets=$TOTAL_COUNT" >> $GITHUB_OUTPUT
            
# # #             if [ "$VERIFIED_COUNT" -gt 0 ]; then
# # #               echo "::warning::$TOTAL_COUNT potential secrets found in ${{ matrix.repo.name }}, including $VERIFIED_COUNT verified credentials!"
# # #             else
# # #               echo "::notice::$TOTAL_COUNT potential secrets found in ${{ matrix.repo.name }}, none verified."
# # #             fi
# # #           fi

# # #       - name: Generate Report
# # #         if: always()
# # #         run: |
# # #           echo "# Security Scan Report for ${{ matrix.repo.name }}" > security-report.md
# # #           echo "Repository: ${{ matrix.repo.path }}" >> security-report.md
# # #           echo "Scan completed on: $(date)" >> security-report.md
# # #           echo "" >> security-report.md
          
# # #           if [ -s scan-results/cleaned-results.json ]; then
# # #             TOTAL_COUNT=$(cat scan-results/cleaned-results.json | grep -v "^$" | wc -l)
# # #             VERIFIED_COUNT=$(cat scan-results/cleaned-results.json | grep -v "^$" | grep -c '"Verified":true' || echo "0")
            
# # #             echo "## Summary" >> security-report.md
# # #             echo "" >> security-report.md
# # #             echo "* **Total potential secrets:** $TOTAL_COUNT" >> security-report.md
# # #             echo "* **Verified credentials:** $VERIFIED_COUNT" >> security-report.md
# # #             echo "" >> security-report.md
            
# # #             echo "## Detected Issues" >> security-report.md
# # #             echo "" >> security-report.md
# # #             echo "| Type | Location | Verified | Severity |" >> security-report.md
# # #             echo "|------|----------|----------|----------|" >> security-report.md
            
# # #             # Process results to create table
# # #             cat scan-results/cleaned-results.json | jq -r '
# # #               [
# # #                 .DetectorName,
# # #                 (if .SourceMetadata.Data.Filesystem then .SourceMetadata.Data.Filesystem.file else .SourceMetadata.Data.Git.file end) + ":" +
# # #                 (if .SourceMetadata.Data.Filesystem then .SourceMetadata.Data.Filesystem.line | tostring else .SourceMetadata.Data.Git.line | tostring end),
# # #                 (if .Verified == true then "‚úì Yes" else "‚úó No" end),
# # #                 (if .Verified == true then "üî¥ High" else "üü° Medium" end)
# # #               ] | @tsv
# # #             ' | sort | while IFS=$'\t' read -r detector location verified severity; do
# # #               echo "| $detector | $location | $verified | $severity |" >> security-report.md
# # #             done
            
# # #             echo "" >> security-report.md
# # #             echo "## Remediation Guide" >> security-report.md
# # #             echo "" >> security-report.md
            
# # #             # Check for specific credential types and provide targeted advice
            
# # #             # MongoDB specific remediation
# # #             if cat scan-results/cleaned-results.json | grep -q '"DetectorName":"MongoDB"'; then
# # #               echo "### MongoDB Credentials" >> security-report.md
# # #               echo "" >> security-report.md
# # #               echo "1. **Remove MongoDB connection strings** from your code and config files" >> security-report.md
# # #               echo "2. **Add `.env` to your `.gitignore`** file immediately" >> security-report.md
# # #               echo "3. **Rotate your MongoDB credentials** in your Atlas dashboard" >> security-report.md
# # #               echo "4. **Use environment variables** for database connections" >> security-report.md
# # #               echo "" >> security-report.md
# # #               echo "Example proper implementation:" >> security-report.md
# # #               echo "" >> security-report.md
# # #               echo '```javascript' >> security-report.md
# # #               echo '// .env file (add to .gitignore!)' >> security-report.md
# # #               echo 'MONGODB_URI=mongodb+srv://username:password@cluster.mongodb.net/database' >> security-report.md
# # #               echo '' >> security-report.md
# # #               echo '// In your code' >> security-report.md
# # #               echo 'require("dotenv").config();' >> security-report.md
# # #               echo 'mongoose.connect(process.env.MONGODB_URI);' >> security-report.md
# # #               echo '```' >> security-report.md
# # #               echo "" >> security-report.md
# # #             fi
            
# # #             # GitHub specific remediation
# # #             if cat scan-results/cleaned-results.json | grep -q '"DetectorName":"Github"'; then
# # #               echo "### GitHub Tokens" >> security-report.md
# # #               echo "" >> security-report.md
# # #               echo "1. **Revoke the exposed GitHub token** immediately at https://github.com/settings/tokens" >> security-report.md
# # #               echo "2. **Create a new token** with minimal required permissions" >> security-report.md
# # #               echo "3. **Use repository secrets** to store tokens for CI/CD workflows" >> security-report.md
# # #               echo "4. **Use fine-grained tokens** for better security" >> security-report.md
# # #               echo "" >> security-report.md
# # #               echo "Example using GitHub secrets:" >> security-report.md
# # #               echo "" >> security-report.md
# # #               echo '```yaml' >> security-report.md
# # #               echo '# In GitHub workflow file' >> security-report.md
# # #               echo 'steps:' >> security-report.md
# # #               echo '  - name: Checkout' >> security-report.md
# # #               echo '    uses: actions/checkout@v4' >> security-report.md
# # #               echo '    with:' >> security-report.md
# # #               echo '      token: ${{ secrets.GITHUB_TOKEN }}' >> security-report.md
# # #               echo '```' >> security-report.md
# # #               echo "" >> security-report.md
# # #             fi
            
# # #             # General remediation advice
# # #             echo "### General Security Practices" >> security-report.md
# # #             echo "" >> security-report.md
# # #             echo "1. **Never commit credentials** to your repository" >> security-report.md
# # #             echo "2. **Use environment variables** for all sensitive configuration" >> security-report.md
# # #             echo "3. **Set up pre-commit hooks** to prevent committing secrets" >> security-report.md
# # #             echo "   - Consider using [pre-commit](https://pre-commit.com/) with TruffleHog" >> security-report.md
# # #             echo "4. **Implement secret rotation** policies for all credentials" >> security-report.md
# # #             echo "5. **Use a password manager** for team credential sharing" >> security-report.md
# # #           else
# # #             echo "## ‚úÖ No security issues found" >> security-report.md
# # #             echo "" >> security-report.md
# # #             echo "No secrets or credentials were detected in this repository." >> security-report.md
# # #           fi
          
# # #       - name: Upload Detailed Results
# # #         uses: actions/upload-artifact@v4
# # #         with:
# # #           name: ${{ matrix.repo.name }}-security-scan
# # #           path: |
# # #             scan-results/cleaned-results.json
# # #             security-report.md
# # #           retention-days: 30
        
# # #       - name: Flag verified secrets without pipeline failure
# # #         if: steps.trufflehog_scan.outputs.verified_secrets_found != '0'
# # #         run: |
# # #           echo "::warning::Verified secrets found in ${{ matrix.repo.name }}! These require immediate attention."
# # #           echo "See the detailed report in artifacts for remediation steps."
# # #           # Not using exit 1 to prevent pipeline failure
  
# # #   summary-report:
# # #     name: üìä Security Summary
# # #     needs: secret-scan
# # #     runs-on: ubuntu-latest
# # #     if: always()
# # #     steps:
# # #       - name: Download all artifacts
# # #         uses: actions/download-artifact@v4
# # #         with:
# # #           path: all-reports
          
# # #       - name: Generate summary report
# # #         run: |
# # #           echo "# üîí Security Scan Summary" > security-summary.md
# # #           echo "Generated: $(date)" >> security-summary.md
# # #           echo "" >> security-summary.md
          
# # #           FOUND_ISSUES=false
          
# # #           # Process each repository
# # #           for REPO in frontend backend; do
# # #             RESULTS_FILE="all-reports/${REPO}-security-scan/cleaned-results.json"
# # #             REPORT_FILE="all-reports/${REPO}-security-scan/security-report.md"
            
# # #             echo "## ${REPO^} Repository" >> security-summary.md
# # #             echo "" >> security-summary.md
            
# # #             if [ -f "$RESULTS_FILE" ] && [ -s "$RESULTS_FILE" ]; then
# # #               FOUND_ISSUES=true
# # #               TOTAL=$(cat "$RESULTS_FILE" | grep -v "^$" | wc -l)
# # #               VERIFIED=$(cat "$RESULTS_FILE" | grep -v "^$" | grep -c '"Verified":true' || echo "0")
              
# # #               if [ "$VERIFIED" -gt 0 ]; then
# # #                 echo "‚ö†Ô∏è **Found $TOTAL potential secrets, including $VERIFIED verified credentials**" >> security-summary.md
# # #               else
# # #                 echo "‚ö†Ô∏è **Found $TOTAL potential secrets (none verified)**" >> security-summary.md
# # #               fi
# # #               echo "" >> security-summary.md
              
# # #               # Extract detector types
# # #               echo "### Issue Types:" >> security-summary.md
# # #               cat "$RESULTS_FILE" | jq -r '.DetectorName' | sort | uniq -c | sort -nr | head -5 | while read -r count detector; do
# # #                 if cat "$RESULTS_FILE" | jq -r 'select(.DetectorName == "'"$detector"'" and .Verified == true) | .DetectorName' | grep -q "$detector"; then
# # #                   echo "- üî¥ **$count $detector** (verified credentials found)" >> security-summary.md
# # #                 else
# # #                   echo "- üü° $count $detector" >> security-summary.md
# # #                 fi
# # #               done
              
# # #               echo "" >> security-summary.md
# # #               echo "See detailed report in artifacts for specific file locations." >> security-summary.md
# # #             else
# # #               echo "‚úÖ No security issues found" >> security-summary.md
# # #             fi
# # #             echo "" >> security-summary.md
# # #           done
          
# # #           echo "## Next Steps" >> security-summary.md
# # #           echo "" >> security-summary.md
          
# # #           if [ "$FOUND_ISSUES" = true ]; then
# # #             echo "### üö® Priority Actions" >> security-summary.md
# # #             echo "" >> security-summary.md
# # #             echo "1. **Download the detailed reports** from the artifacts" >> security-summary.md
# # #             echo "2. **Take immediate action** on any verified credentials (marked üî¥)" >> security-summary.md
# # #             echo "3. **Review all potential secrets** and confirm if they are real or false positives" >> security-summary.md
# # #             echo "4. **Implement the recommended fixes** from the detailed reports" >> security-summary.md
# # #           else
# # #             echo "### ‚úÖ Maintain Security" >> security-summary.md
# # #             echo "" >> security-summary.md
# # #             echo "1. **Continue regular scanning** with this workflow" >> security-summary.md
# # #             echo "2. **Set up pre-commit hooks** to prevent accidental secret commits" >> security-summary.md
# # #             echo "3. **Train team members** on secure credential handling" >> security-summary.md
# # #           fi
          
# # #           echo "" >> security-summary.md
# # #           echo "### üõ°Ô∏è Best Practices" >> security-summary.md
# # #           echo "" >> security-summary.md
# # #           echo "- **Store secrets in environment variables** or dedicated secret management systems" >> security-summary.md
# # #           echo "- **Add sensitive files to .gitignore** (.env, config files with credentials)" >> security-summary.md
# # #           echo "- **Use GitHub Secrets** for CI/CD credentials" >> security-summary.md
# # #           echo "- **Implement regular credential rotation** as part of your security practice" >> security-summary.md
          
# # #       - name: Upload Summary Report
# # #         uses: actions/upload-artifact@v4
# # #         with:
# # #           name: security-scan-summary
# # #           path: security-summary.md
# # #           retention-days: 30
# # name: TruffleHog Secret Scanning

# # on:
# #   push:
# #     branches: [ main, master ]
# #   pull_request:
# #     branches: [ main, master ]
# #   schedule:
# #     - cron: '0 0 * * 0'  # Run weekly on Sunday at midnight
# #   workflow_dispatch:  # Allow manual triggering

# # jobs:
# #   secret-scan:
# #     name: üîç Secret Scan
# #     runs-on: ubuntu-latest
# #     strategy:
# #       matrix:
# #         repo: 
# #           - {name: 'frontend', path: 'jai3747/crud-app-frontend'}
# #           - {name: 'backend', path: 'jai3747/crud-app-backend'}
# #       fail-fast: false
    
# #     steps:
# #       - name: Clean workspace
# #         run: |
# #           rm -rf * 
# #           rm -rf .git
        
# #       - name: Checkout Code
# #         uses: actions/checkout@v4
# #         with:
# #           repository: ${{ matrix.repo.path }}
# #           token: ${{ secrets.GH_PAT }}
# #           fetch-depth: 0  # Full history
# #           clean: true
# #           force: true
      
# #       - name: Install dependencies
# #         run: |
# #           sudo apt-get update
# #           sudo apt-get install -y jq
        
# #       - name: Run TruffleHog Scan
# #         id: trufflehog_scan
# #         run: |
# #           # Install TruffleHog
# #           curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin

# #           # Create directories for results
# #           mkdir -p scan-results
# #           touch scan-results/git-scan-results.json
# #           touch scan-results/fs-scan-results.json
          
# #           # Create trufflehog-ignore.txt file (using plain glob patterns)
# #           cat << EOF > trufflehog-ignore.txt
# #           node_modules/
# #           test/
# #           tests/
# #           docs/
# #           examples/
# #           *.md
# #           EOF
          
# #           # Run git scan (ignore errors)
# #           echo "Running git history scan..."
# #           trufflehog git file://. \
# #             --json \
# #             --no-update \
# #             --exclude-paths trufflehog-ignore.txt > scan-results/git-scan-results.json || true
          
# #           # Run filesystem scan for each file pattern separately
# #           echo "Running filesystem scan for sensitive files..."
          
# #           # Scan .env files
# #           trufflehog filesystem . \
# #             --json \
# #             --exclude-paths trufflehog-ignore.txt \
# #             --only-verified > scan-results/env-files.json || true
          
# #           # Scan config files
# #           trufflehog filesystem . \
# #             --json \
# #             --exclude-paths trufflehog-ignore.txt \
# #             --only-verified > scan-results/config-files.json || true
          
# #           # Combine all results
# #           cat scan-results/git-scan-results.json scan-results/env-files.json scan-results/config-files.json | grep -v "^$" > scan-results/all-raw-results.json || true
          
# #           # Process results
# #           echo "Processing results..."
# #           # Create empty file to avoid errors if no results
# #           touch scan-results/cleaned-results.json
          
# #           # Check if there are any results
# #           if [ -s scan-results/all-raw-results.json ]; then
# #             # Filter results
# #             cat scan-results/all-raw-results.json | jq -c '.' | grep -v "null" > scan-results/cleaned-results.json || true
# #           fi
          
# #           # Count results - handle empty file
# #           if [ ! -s scan-results/cleaned-results.json ]; then
# #             echo "secrets_found=false" >> $GITHUB_OUTPUT
# #             echo "verified_secrets_found=0" >> $GITHUB_OUTPUT
# #             echo "total_secrets=0" >> $GITHUB_OUTPUT
# #             echo "::notice::No secrets found in ${{ matrix.repo.name }} repository."
# #           else
# #             # Count total and verified secrets
# #             TOTAL_COUNT=$(cat scan-results/cleaned-results.json | grep -v "^$" | wc -l)
# #             VERIFIED_COUNT=$(cat scan-results/cleaned-results.json | grep -v "^$" | grep -c '"Verified":true' || echo "0")
            
# #             echo "secrets_found=true" >> $GITHUB_OUTPUT
# #             echo "verified_secrets_found=$VERIFIED_COUNT" >> $GITHUB_OUTPUT
# #             echo "total_secrets=$TOTAL_COUNT" >> $GITHUB_OUTPUT
            
# #             if [ "$VERIFIED_COUNT" -gt 0 ]; then
# #               echo "::warning::$TOTAL_COUNT potential secrets found in ${{ matrix.repo.name }}, including $VERIFIED_COUNT verified credentials!"
# #             else
# #               echo "::notice::$TOTAL_COUNT potential secrets found in ${{ matrix.repo.name }}, none verified."
# #             fi
# #           fi

# #       - name: Run Additional Scans for Sensitive Files
# #         run: |
# #           # Create list of sensitive file patterns
# #           echo "Scanning specifically for .env files and config files..."
          
# #           # Find potential sensitive files
# #           find . -type f -name ".env*" -o -name "*.config.js" -o -name "config.*" -o -name "*.yml" -o -name "*.yaml" -o -name "*.json" | grep -v "node_modules" > sensitive-files.txt
          
# #           # Initialize results file
# #           echo "[]" > scan-results/manual-scan-results.json
          
# #           # Check each file for potential secrets
# #           while read -r file; do
# #             if [ -f "$file" ]; then
# #               # Look for MongoDB connection strings
# #               if grep -q "mongodb[s]\?:\/\/[a-zA-Z0-9\.\-_]\+:[a-zA-Z0-9\.\-_]\+@" "$file"; then
# #                 echo "{ \"DetectorName\": \"MongoDB\", \"SourceMetadata\": { \"Data\": { \"Filesystem\": { \"file\": \"$file\", \"line\": $(grep -n "mongodb[s]\?:\/\/" "$file" | cut -d: -f1) } } }, \"Verified\": true }" >> scan-results/manual-scan-results.json
# #               fi
              
# #               # Look for GitHub tokens
# #               if grep -q "ghp_[a-zA-Z0-9]\+" "$file" || grep -q "github_pat_[a-zA-Z0-9_]\+" "$file"; then
# #                 echo "{ \"DetectorName\": \"Github\", \"SourceMetadata\": { \"Data\": { \"Filesystem\": { \"file\": \"$file\", \"line\": $(grep -n "ghp_\\|github_pat_" "$file" | cut -d: -f1) } } }, \"Verified\": true }" >> scan-results/manual-scan-results.json
# #               fi
              
# #               # Look for API keys
# #               if grep -q "api[_-]\?key[\"'=: ]\+[a-zA-Z0-9_\-]\+" "$file"; then
# #                 echo "{ \"DetectorName\": \"Generic API Key\", \"SourceMetadata\": { \"Data\": { \"Filesystem\": { \"file\": \"$file\", \"line\": $(grep -n "api[_-]\\?key" "$file" | cut -d: -f1) } } }, \"Verified\": false }" >> scan-results/manual-scan-results.json
# #               fi
# #             fi
# #           done < sensitive-files.txt
          
# #           # Combine with other results
# #           cat scan-results/manual-scan-results.json >> scan-results/cleaned-results.json || true

# #       - name: Generate Report
# #         if: always()
# #         run: |
# #           echo "# Security Scan Report for ${{ matrix.repo.name }}" > security-report.md
# #           echo "Repository: ${{ matrix.repo.path }}" >> security-report.md
# #           echo "Scan completed: $(date)" >> security-report.md
# #           echo "" >> security-report.md
          
# #           if [ -s scan-results/cleaned-results.json ] && [ "$(cat scan-results/cleaned-results.json | grep -v "^$" | wc -l)" -gt 0 ]; then
# #             # Count results again to ensure accuracy
# #             TOTAL_COUNT=$(cat scan-results/cleaned-results.json | grep -v "^$" | wc -l)
# #             VERIFIED_COUNT=$(cat scan-results/cleaned-results.json | grep -v "^$" | grep -c '"Verified":true' || echo "0")
            
# #             echo "## üö® Security Issues Found" >> security-report.md
# #             echo "" >> security-report.md
# #             echo "* **Total potential secrets:** $TOTAL_COUNT" >> security-report.md
# #             echo "* **Verified credentials:** $VERIFIED_COUNT" >> security-report.md
# #             echo "" >> security-report.md
            
# #             echo "## Detected Issues" >> security-report.md
# #             echo "" >> security-report.md
# #             echo "| Type | File | Line | Verified | Severity |" >> security-report.md
# #             echo "|------|------|------|----------|----------|" >> security-report.md
            
# #             # Format each result as a table row
# #             cat scan-results/cleaned-results.json | grep -v "^$" | while read -r line; do
# #               # Extract data using temporary files to handle parsing errors
# #               echo "$line" > temp_line.json
# #               DETECTOR=$(jq -r '.DetectorName // "Unknown"' temp_line.json)
              
# #               # Check if it's from filesystem or git
# #               if jq -e '.SourceMetadata.Data.Filesystem' temp_line.json > /dev/null 2>&1; then
# #                 FILE=$(jq -r '.SourceMetadata.Data.Filesystem.file // "Unknown"' temp_line.json)
# #                 LINE_NUM=$(jq -r '.SourceMetadata.Data.Filesystem.line // "?"' temp_line.json)
# #               else
# #                 FILE=$(jq -r '.SourceMetadata.Data.Git.file // "Unknown"' temp_line.json)
# #                 LINE_NUM=$(jq -r '.SourceMetadata.Data.Git.line // "?"' temp_line.json)
# #               fi
              
# #               VERIFIED=$(jq -r '.Verified // false' temp_line.json)
# #               if [ "$VERIFIED" = "true" ]; then
# #                 VERIFIED_TEXT="‚úì Yes"
# #                 SEVERITY="üî¥ High"
# #               else
# #                 VERIFIED_TEXT="‚úó No"
# #                 SEVERITY="üü° Medium"
# #               fi
              
# #               echo "| $DETECTOR | $FILE | $LINE_NUM | $VERIFIED_TEXT | $SEVERITY |" >> security-report.md
# #             done
            
# #             # Remove temporary file
# #             rm -f temp_line.json
            
# #             echo "" >> security-report.md
# #             echo "## How to Fix These Issues" >> security-report.md
# #             echo "" >> security-report.md
            
# #             # MongoDB specific remediation
# #             if grep -q '"DetectorName":"MongoDB"' scan-results/cleaned-results.json; then
# #               echo "### MongoDB Credentials" >> security-report.md
# #               echo "" >> security-report.md
# #               echo "1. **Remove MongoDB connection strings** from your code and config files" >> security-report.md
# #               echo "2. **Add `.env` to your `.gitignore`** file immediately" >> security-report.md
# #               echo "3. **Rotate your MongoDB credentials** in your Atlas dashboard" >> security-report.md
# #               echo "4. **Use environment variables** for database connections" >> security-report.md
# #               echo "" >> security-report.md
# #               echo "Example proper implementation:" >> security-report.md
# #               echo "" >> security-report.md
# #               echo '```javascript' >> security-report.md
# #               echo '// .env file (add to .gitignore!)' >> security-report.md
# #               echo 'MONGODB_URI=mongodb+srv://username:password@cluster.mongodb.net/database' >> security-report.md
# #               echo '' >> security-report.md
# #               echo '// In your code' >> security-report.md
# #               echo 'require("dotenv").config();' >> security-report.md
# #               echo 'mongoose.connect(process.env.MONGODB_URI);' >> security-report.md
# #               echo '```' >> security-report.md
# #               echo "" >> security-report.md
# #             fi
            
# #             # GitHub specific remediation
# #             if grep -q '"DetectorName":"Github"' scan-results/cleaned-results.json; then
# #               echo "### GitHub Tokens" >> security-report.md
# #               echo "" >> security-report.md
# #               echo "1. **Revoke the exposed GitHub token** immediately at https://github.com/settings/tokens" >> security-report.md
# #               echo "2. **Create a new token** with minimal required permissions" >> security-report.md
# #               echo "3. **Use repository secrets** to store tokens for CI/CD workflows" >> security-report.md
# #               echo "4. **Use fine-grained tokens** for better security" >> security-report.md
# #               echo "" >> security-report.md
# #               echo "Example using GitHub secrets:" >> security-report.md
# #               echo "" >> security-report.md
# #               echo '```yaml' >> security-report.md
# #               echo '# In GitHub workflow file' >> security-report.md
# #               echo 'steps:' >> security-report.md
# #               echo '  - name: Checkout' >> security-report.md
# #               echo '    uses: actions/checkout@v4' >> security-report.md
# #               echo '    with:' >> security-report.md
# #               echo '      token: ${{ secrets.GITHUB_TOKEN }}' >> security-report.md
# #               echo '```' >> security-report.md
# #               echo "" >> security-report.md
# #             fi
            
# #             # API Key remediation
# #             if grep -q '"DetectorName":"Generic API Key"' scan-results/cleaned-results.json; then
# #               echo "### API Keys" >> security-report.md
# #               echo "" >> security-report.md
# #               echo "1. **Remove API keys** from your code files" >> security-report.md
# #               echo "2. **Store API keys** in environment variables" >> security-report.md
# #               echo "3. **Rotate exposed API keys** immediately" >> security-report.md
# #               echo "4. **Consider using a service like AWS Secrets Manager** for production" >> security-report.md
# #               echo "" >> security-report.md
# #             fi
            
# #             # General remediation advice
# #             echo "### General Security Practices" >> security-report.md
# #             echo "" >> security-report.md
# #             echo "1. **Never commit credentials** to your repository" >> security-report.md
# #             echo "2. **Use environment variables** for all sensitive configuration" >> security-report.md
# #             echo "3. **Add `.env` files to `.gitignore`** to prevent accidental commits" >> security-report.md
# #             echo "4. **Set up pre-commit hooks** to prevent committing secrets" >> security-report.md
# #             echo "5. **Implement secret rotation** policies for all credentials" >> security-report.md
# #           else
# #             echo "## ‚úÖ No security issues found" >> security-report.md
# #             echo "" >> security-report.md
# #             echo "No secrets or credentials were detected in this repository." >> security-report.md
# #           fi
          
# #       - name: Upload Detailed Results
# #         uses: actions/upload-artifact@v4
# #         with:
# #           name: ${{ matrix.repo.name }}-security-scan
# #           path: |
# #             scan-results/cleaned-results.json
# #             security-report.md
# #           retention-days: 30
  
# #   summary-report:
# #     name: üìä Security Summary
# #     needs: secret-scan
# #     runs-on: ubuntu-latest
# #     if: always()
# #     steps:
# #       - name: Download all artifacts
# #         uses: actions/download-artifact@v4
# #         with:
# #           path: all-reports
          
# #       - name: Generate summary report
# #         run: |
# #           echo "# üîí Security Scan Summary" > security-summary.md
# #           echo "Generated: $(date)" >> security-summary.md
# #           echo "" >> security-summary.md
          
# #           FOUND_ISSUES=false
          
# #           # Process each repository
# #           for REPO in frontend backend; do
# #             RESULTS_FILE="all-reports/${REPO}-security-scan/cleaned-results.json"
# #             REPORT_FILE="all-reports/${REPO}-security-scan/security-report.md"
            
# #             echo "## ${REPO^} Repository" >> security-summary.md
# #             echo "" >> security-summary.md
            
# #             if [ -f "$RESULTS_FILE" ] && [ -s "$RESULTS_FILE" ] && [ "$(cat "$RESULTS_FILE" | grep -v "^$" | wc -l)" -gt 0 ]; then
# #               FOUND_ISSUES=true
# #               TOTAL=$(cat "$RESULTS_FILE" | grep -v "^$" | wc -l)
# #               VERIFIED=$(cat "$RESULTS_FILE" | grep -v "^$" | grep -c '"Verified":true' || echo "0")
              
# #               if [ "$VERIFIED" -gt 0 ]; then
# #                 echo "‚ö†Ô∏è **Found $TOTAL potential secrets, including $VERIFIED verified credentials**" >> security-summary.md
# #               else
# #                 echo "‚ö†Ô∏è **Found $TOTAL potential secrets (none verified)**" >> security-summary.md
# #               fi
# #               echo "" >> security-summary.md
              
# #               # Show top 3 locations with issues
# #               echo "### Where to Look:" >> security-summary.md
# #               cat "$RESULTS_FILE" | grep -v "^$" | while read -r line; do
# #                 echo "$line" > temp_file.json
# #                 if jq -e '.SourceMetadata.Data.Filesystem' temp_file.json > /dev/null 2>&1; then
# #                   FILE=$(jq -r '.SourceMetadata.Data.Filesystem.file' temp_file.json)
# #                   echo "$FILE"
# #                 elif jq -e '.SourceMetadata.Data.Git' temp_file.json > /dev/null 2>&1; then
# #                   FILE=$(jq -r '.SourceMetadata.Data.Git.file' temp_file.json)
# #                   echo "$FILE"
# #                 fi
# #               done | sort | uniq -c | sort -nr | head -3 | while read -r count file; do
# #                 echo "- **$file** ($count issue(s))" >> security-summary.md
# #               done
# #               rm -f temp_file.json
              
# #               echo "" >> security-summary.md
# #               echo "### Issue Types:" >> security-summary.md
# #               cat "$RESULTS_FILE" | grep -v "^$" | while read -r line; do
# #                 echo "$line" > temp_file.json
# #                 DETECTOR=$(jq -r '.DetectorName' temp_file.json)
# #                 echo "$DETECTOR"
# #               done | sort | uniq -c | sort -nr | while read -r count detector; do
# #                 # Check if this detector type has any verified findings
# #                 cat "$RESULTS_FILE" > check_file.json
# #                 if grep -q "\"DetectorName\":\"$detector\"" check_file.json && grep -q "\"Verified\":true" check_file.json; then
# #                   echo "- üî¥ **$count $detector** (verified credentials found)" >> security-summary.md
# #                 else
# #                   echo "- üü° $count $detector" >> security-summary.md
# #                 fi
# #               done
# #               rm -f temp_file.json check_file.json
              
# #               echo "" >> security-summary.md
# #               echo "See detailed report in artifacts for specific file locations." >> security-summary.md
# #             else
# #               echo "‚úÖ No security issues found" >> security-summary.md
# #             fi
# #             echo "" >> security-summary.md
# #           done
          
# #           echo "## Next Steps" >> security-summary.md
# #           echo "" >> security-summary.md
          
# #           if [ "$FOUND_ISSUES" = true ]; then
# #             echo "### üö® Priority Actions" >> security-summary.md
# #             echo "" >> security-summary.md
# #             echo "1. **Download the detailed reports** from the artifacts" >> security-summary.md
# #             echo "2. **Take immediate action** on any verified credentials (marked üî¥)" >> security-summary.md
# #             echo "3. **Review all potential secrets** and confirm if they are real or false positives" >> security-summary.md
# #             echo "4. **Implement the recommended fixes** from the detailed reports" >> security-summary.md
# #           else
# #             echo "### ‚úÖ Maintain Security" >> security-summary.md
# #             echo "" >> security-summary.md
# #             echo "1. **Continue regular scanning** with this workflow" >> security-summary.md
# #             echo "2. **Set up pre-commit hooks** to prevent accidental secret commits" >> security-summary.md
# #             echo "3. **Train team members** on secure credential handling" >> security-summary.md
# #           fi
          
# #           echo "" >> security-summary.md
# #           echo "### üõ°Ô∏è Best Practices" >> security-summary.md
# #           echo "" >> security-summary.md
# #           echo "- **Store secrets in environment variables** or dedicated secret management systems" >> security-summary.md
# #           echo "- **Add sensitive files to .gitignore** (.env, config files with credentials)" >> security-summary.md
# #           echo "- **Use GitHub Secrets** for CI/CD credentials" >> security-summary.md
# #           echo "- **Implement regular credential rotation** as part of your security practice" >> security-summary.md
          
# #       - name: Upload Summary Report
# #         uses: actions/upload-artifact@v4
# #         with:
# #           name: security-scan-summary
# #           path: security-summary.md
# #           retention-days: 30
# name: Simple Secret Scanning

# on:
#   push:
#     branches: [ main, master ]
#   pull_request:
#     branches: [ main, master ]
#   schedule:
#     - cron: '0 0 * * 0'  # Run weekly on Sunday at midnight
#   workflow_dispatch:  # Allow manual triggering

# jobs:
#   scan-secrets:
#     name: üîç Secret Scan
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 0  # Full history
      
#       - name: Install TruffleHog
#         run: |
#           curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
#           sudo apt-get update && sudo apt-get install -y jq
      
#       - name: Run Secret Scan
#         id: trufflehog_scan
#         run: |
#           # Create ignore patterns
#           cat << EOF > trufflehog-ignore.txt
#           node_modules/
#           test/
#           tests/
#           docs/
#           examples/
#           *.md
#           EOF
          
#           # Create results directory
#           mkdir -p scan-results
          
#           # Run git scan for historical secrets
#           echo "Scanning git history..."
#           trufflehog git file://. \
#             --json \
#             --exclude-paths trufflehog-ignore.txt > scan-results/git-secrets.json || true
          
#           # Run filesystem scan for current secrets
#           echo "Scanning files..."
#           trufflehog filesystem . \
#             --json \
#             --exclude-paths trufflehog-ignore.txt \
#             --only-verified > scan-results/fs-secrets.json || true
          
#           # Combine results and format
#           cat scan-results/git-secrets.json scan-results/fs-secrets.json | grep -v "^$" > scan-results/all-secrets.json || true
          
#           # Count results
#           TOTAL=$(cat scan-results/all-secrets.json | grep -v "^$" | wc -l || echo "0")
#           VERIFIED=$(cat scan-results/all-secrets.json | grep -v "^$" | grep -c '"Verified":true' || echo "0")
          
#           echo "Total secrets found: $TOTAL (Verified: $VERIFIED)"
          
#           if [ "$TOTAL" -gt 0 ]; then
#             echo "secrets_found=true" >> $GITHUB_OUTPUT
#             echo "::warning::Found $TOTAL potential secrets ($VERIFIED verified)"
#           else
#             echo "secrets_found=false" >> $GITHUB_OUTPUT
#             echo "::notice::No secrets found"
#           fi

#       - name: Generate HTML Report
#         if: always()
#         run: |
#           cat << EOF > scan-results/secret-report.html
#           <!DOCTYPE html>
#           <html>
#           <head>
#             <title>Secret Scan Report</title>
#             <style>
#               body { font-family: Arial, sans-serif; margin: 20px; }
#               table { border-collapse: collapse; width: 100%; }
#               th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
#               th { background-color: #f2f2f2; }
#               .high { background-color: #ffdddd; }
#               .medium { background-color: #ffffdd; }
#               h1, h2 { color: #333; }
#               .verified { font-weight: bold; color: red; }
#               .unverified { color: orange; }
#             </style>
#           </head>
#           <body>
#             <h1>Secret Scanning Report</h1>
#             <p>Scan date: $(date)</p>
#             <p>Repository: $(git config --get remote.origin.url || echo "Local repository")</p>
#           EOF
          
#           # Check if we have results
#           if [ -s scan-results/all-secrets.json ] && [ "$(cat scan-results/all-secrets.json | wc -l)" -gt 0 ]; then
#             TOTAL=$(cat scan-results/all-secrets.json | grep -v "^$" | wc -l)
#             VERIFIED=$(cat scan-results/all-secrets.json | grep -v "^$" | grep -c '"Verified":true' || echo "0")
            
#             echo "<h2>üö® Found $TOTAL potential secrets ($VERIFIED verified)</h2>" >> scan-results/secret-report.html
            
#             # Secret type summary
#             echo "<h3>Secret Types:</h3>" >> scan-results/secret-report.html
#             echo "<ul>" >> scan-results/secret-report.html
#             cat scan-results/all-secrets.json | grep -v "^$" | jq -r '.DetectorName' 2>/dev/null | sort | uniq -c | sort -nr | while read -r count detector; do
#               if [ -n "$detector" ]; then
#                 echo "<li>$count $detector</li>" >> scan-results/secret-report.html
#               fi
#             done
#             echo "</ul>" >> scan-results/secret-report.html
            
#             # Create table of findings
#             echo "<h3>Detailed Findings:</h3>" >> scan-results/secret-report.html
#             echo "<table>" >> scan-results/secret-report.html
#             echo "<tr><th>Secret Type</th><th>File</th><th>Line</th><th>Verified</th><th>Preview</th></tr>" >> scan-results/secret-report.html
            
#             # Process each finding
#             cat scan-results/all-secrets.json | grep -v "^$" | while read -r line; do
#               # Extract data
#               DETECTOR=$(echo "$line" | jq -r '.DetectorName // "Unknown"' 2>/dev/null)
#               VERIFIED=$(echo "$line" | jq -r '.Verified // false' 2>/dev/null)
#               SECRET=$(echo "$line" | jq -r '.Raw // "REDACTED"' 2>/dev/null)
              
#               # Handle different source types
#               if echo "$line" | jq -e '.SourceMetadata.Data.Filesystem' >/dev/null 2>&1; then
#                 FILE=$(echo "$line" | jq -r '.SourceMetadata.Data.Filesystem.file // "Unknown"' 2>/dev/null)
#                 LINE=$(echo "$line" | jq -r '.SourceMetadata.Data.Filesystem.line // "?"' 2>/dev/null)
#               else
#                 FILE=$(echo "$line" | jq -r '.SourceMetadata.Data.Git.file // "Unknown"' 2>/dev/null)
#                 LINE=$(echo "$line" | jq -r '.SourceMetadata.Data.Git.line // "?"' 2>/dev/null)
#               fi
              
#               # Format row based on verification status
#               CSS_CLASS=""
#               VERIFIED_TEXT=""
#               if [ "$VERIFIED" = "true" ]; then
#                 CSS_CLASS="high"
#                 VERIFIED_TEXT="<span class='verified'>‚úì VERIFIED</span>"
#               else
#                 CSS_CLASS="medium"
#                 VERIFIED_TEXT="<span class='unverified'>Not verified</span>"
#               fi
              
#               # Create a preview that shows just enough context
#               PREVIEW=""
#               if [ -n "$SECRET" ] && [ "$SECRET" != "REDACTED" ]; then
#                 # Show partial secret with some masking
#                 SECRET_LENGTH=${#SECRET}
#                 if [ "$SECRET_LENGTH" -gt 8 ]; then
#                   PREFIX=$(echo "$SECRET" | cut -c 1-4)
#                   SUFFIX=$(echo "$SECRET" | cut -c $(($SECRET_LENGTH - 3))-$SECRET_LENGTH)
#                   PREVIEW="${PREFIX}...${SUFFIX}"
#                 else
#                   PREVIEW="***REDACTED***"
#                 fi
#               else
#                 PREVIEW="***REDACTED***"
#               fi
              
#               # Write table row
#               echo "<tr class='$CSS_CLASS'>" >> scan-results/secret-report.html
#               echo "<td>$DETECTOR</td>" >> scan-results/secret-report.html
#               echo "<td>$FILE</td>" >> scan-results/secret-report.html
#               echo "<td>$LINE</td>" >> scan-results/secret-report.html
#               echo "<td>$VERIFIED_TEXT</td>" >> scan-results/secret-report.html
#               echo "<td>$PREVIEW</td>" >> scan-results/secret-report.html
#               echo "</tr>" >> scan-results/secret-report.html
#             done
            
#             echo "</table>" >> scan-results/secret-report.html
            
#             # Add remediation advice
#             echo "<h2>How to Fix These Issues</h2>" >> scan-results/secret-report.html
#             echo "<ol>" >> scan-results/secret-report.html
#             echo "<li><strong>Remove credentials</strong> from code and configuration files</li>" >> scan-results/secret-report.html
#             echo "<li><strong>Rotate any exposed credentials</strong> immediately</li>" >> scan-results/secret-report.html
#             echo "<li><strong>Use environment variables</strong> or secret management systems</li>" >> scan-results/secret-report.html
#             echo "<li><strong>Add sensitive files to .gitignore</strong> (.env, config files, etc.)</li>" >> scan-results/secret-report.html
#             echo "</ol>" >> scan-results/secret-report.html
            
#           else
#             # No secrets found
#             echo "<h2>‚úÖ No secrets found</h2>" >> scan-results/secret-report.html
#             echo "<p>No potential secrets or credentials were detected in this repository.</p>" >> scan-results/secret-report.html
#           fi
          
#           # Close HTML document
#           echo "</body></html>" >> scan-results/secret-report.html
          
#           # Create a simplified text report version
#           echo "# Secret Scan Report" > scan-results/secret-report.txt
#           echo "Scan date: $(date)" >> scan-results/secret-report.txt
#           echo "Repository: $(git config --get remote.origin.url || echo 'Local repository')" >> scan-results/secret-report.txt
#           echo "" >> scan-results/secret-report.txt
          
#           if [ -s scan-results/all-secrets.json ] && [ "$(cat scan-results/all-secrets.json | wc -l)" -gt 0 ]; then
#             TOTAL=$(cat scan-results/all-secrets.json | grep -v "^$" | wc -l)
#             VERIFIED=$(cat scan-results/all-secrets.json | grep -v "^$" | grep -c '"Verified":true' || echo "0")
            
#             echo "üö® FOUND $TOTAL POTENTIAL SECRETS ($VERIFIED VERIFIED)" >> scan-results/secret-report.txt
#             echo "" >> scan-results/secret-report.txt
            
#             echo "FOUND ISSUES:" >> scan-results/secret-report.txt
#             echo "-------------" >> scan-results/secret-report.txt
            
#             cat scan-results/all-secrets.json | grep -v "^$" | while read -r line; do
#               # Extract data
#               DETECTOR=$(echo "$line" | jq -r '.DetectorName // "Unknown"' 2>/dev/null)
#               VERIFIED=$(echo "$line" | jq -r '.Verified // false' 2>/dev/null)
              
#               # Handle different source types
#               if echo "$line" | jq -e '.SourceMetadata.Data.Filesystem' >/dev/null 2>&1; then
#                 FILE=$(echo "$line" | jq -r '.SourceMetadata.Data.Filesystem.file // "Unknown"' 2>/dev/null)
#                 LINE=$(echo "$line" | jq -r '.SourceMetadata.Data.Filesystem.line // "?"' 2>/dev/null)
#               else
#                 FILE=$(echo "$line" | jq -r '.SourceMetadata.Data.Git.file // "Unknown"' 2>/dev/null)
#                 LINE=$(echo "$line" | jq -r '.SourceMetadata.Data.Git.line // "?"' 2>/dev/null)
#               fi
              
#               # Format verification status
#               if [ "$VERIFIED" = "true" ]; then
#                 VERIFIED_TEXT="VERIFIED"
#               else
#                 VERIFIED_TEXT="Not verified"
#               fi
              
#               echo "* $DETECTOR in $FILE (Line $LINE) - $VERIFIED_TEXT" >> scan-results/secret-report.txt
#             done
#           else
#             echo "‚úÖ NO SECRETS FOUND" >> scan-results/secret-report.txt
#           fi

#       - name: Create simple JSON report
#         if: always()
#         run: |
#           # Create a simplified JSON report
#           echo "{" > scan-results/summary.json
#           echo "  \"scan_date\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"," >> scan-results/summary.json
          
#           # Count results
#           if [ -s scan-results/all-secrets.json ]; then
#             TOTAL=$(cat scan-results/all-secrets.json | grep -v "^$" | wc -l)
#             VERIFIED=$(cat scan-results/all-secrets.json | grep -v "^$" | grep -c '"Verified":true' || echo "0")
#             echo "  \"found_secrets\": true," >> scan-results/summary.json
#             echo "  \"total_secrets\": $TOTAL," >> scan-results/summary.json
#             echo "  \"verified_secrets\": $VERIFIED," >> scan-results/summary.json
            
#             # Extract secret types
#             echo "  \"secret_types\": [" >> scan-results/summary.json
#             TYPES=$(cat scan-results/all-secrets.json | grep -v "^$" | jq -r '.DetectorName' 2>/dev/null | sort | uniq)
#             FIRST=true
#             for TYPE in $TYPES; do
#               if [ "$FIRST" = true ]; then
#                 FIRST=false
#               else
#                 echo "," >> scan-results/summary.json
#               fi
#               echo "    \"$TYPE\"" >> scan-results/summary.json
#             done
#             echo "  ]," >> scan-results/summary.json
            
#             # Top files with issues
#             echo "  \"top_files\": [" >> scan-results/summary.json
#             cat scan-results/all-secrets.json | grep -v "^$" | jq -r '.SourceMetadata.Data.Filesystem.file // .SourceMetadata.Data.Git.file // "unknown"' 2>/dev/null | sort | uniq -c | sort -nr | head -5 | while read -r count file; do
#               if [ "$count" -gt 0 ] && [ -n "$file" ] && [ "$file" != "null" ] && [ "$file" != "unknown" ]; then
#                 echo "    {\"file\": \"$file\", \"count\": $count}," >> scan-results/summary.json
#               fi
#             done
#             # Remove last comma
#             sed -i '$ s/,$//' scan-results/summary.json
#             echo "  ]" >> scan-results/summary.json
#           else
#             echo "  \"found_secrets\": false," >> scan-results/summary.json
#             echo "  \"total_secrets\": 0," >> scan-results/summary.json
#             echo "  \"verified_secrets\": 0" >> scan-results/summary.json
#           fi
          
#           echo "}" >> scan-results/summary.json

#       - name: Upload Reports
#         uses: actions/upload-artifact@v4
#         with:
#           name: secret-scan-reports
#           path: |
#             scan-results/secret-report.html
#             scan-results/secret-report.txt
#             scan-results/summary.json
#             scan-results/all-secrets.json
#           retention-days: 30
name: Complete Secret Scan

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  scan-repository:
    name: üîç Full Repository Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for complete scanning
      
      - name: Install scanning tools
        run: |
          # Install TruffleHog
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
          
          # Install gitleaks for additional coverage
          curl -sSfL https://github.com/zricethezav/gitleaks/releases/download/v8.18.1/gitleaks_8.18.1_linux_x64.tar.gz | tar -xzf - -C /tmp
          sudo mv /tmp/gitleaks /usr/local/bin/
          
          # Install needed utilities
          sudo apt-get update && sudo apt-get install -y jq
      
      - name: Scan with TruffleHog
        run: |
          # Create results directory
          mkdir -p scan-results
          
          # Full git history scan
          echo "Scanning entire git history..."
          trufflehog git file://. \
            --json \
            --no-update > scan-results/trufflehog-git.json || true
          
          # Filesystem scan for current files
          echo "Scanning current files..."
          trufflehog filesystem . \
            --json \
            --no-update > scan-results/trufflehog-fs.json || true
            
          # Combine results
          cat scan-results/trufflehog-git.json scan-results/trufflehog-fs.json | grep -v "^$" > scan-results/trufflehog-all.json || true
          
          # Count results
          TOTAL=$(cat scan-results/trufflehog-all.json | grep -v "^$" | wc -l || echo "0")
          echo "TruffleHog found $TOTAL potential secrets"
      
      - name: Scan with Gitleaks
        run: |
          # Scan repo with gitleaks
          echo "Running Gitleaks scan..."
          gitleaks detect --source . --report-format json --report-path scan-results/gitleaks-results.json || true
          
          # Process results into a consistent format
          if [ -f "scan-results/gitleaks-results.json" ]; then
            cat scan-results/gitleaks-results.json | jq -c '.[] | {
              "DetectorName": .RuleID,
              "SourceMetadata": {
                "Data": {
                  "Filesystem": {
                    "file": .File,
                    "line": .StartLine
                  }
                }
              },
              "Raw": .Secret,
              "Verified": true
            }' > scan-results/gitleaks-formatted.json || true
          else
            echo "[]" > scan-results/gitleaks-formatted.json
          fi
      
      - name: Scan specific sensitive files
        run: |
          echo "Scanning for specific sensitive patterns..."
          
          # Look for common sensitive files
          find . -type f \( -name "*.env*" -o -name "*.pem" -o -name "*.key" -o -name "*config*.json" -o -name "*config*.js" -o -name "*secret*" \) > scan-results/sensitive-files.txt
          
          # Only process if we found matching files
          if [ -s scan-results/sensitive-files.txt ]; then
            touch scan-results/sensitive-results.json
            
            # Patterns to check for
            while read -r file; do
              if [ -f "$file" ]; then
                # Common patterns that indicate secrets
                if grep -q -E "api[_\-]?key|secret|password|token|credential|private[_\-]?key|auth" "$file"; then
                  LINE=$(grep -n -E "api[_\-]?key|secret|password|token|credential|private[_\-]?key|auth" "$file" | head -1 | cut -d: -f1)
                  
                  # Generate a JSON for this finding
                  echo "{
                    \"DetectorName\": \"SensitiveFile\",
                    \"SourceMetadata\": {
                      \"Data\": {
                        \"Filesystem\": {
                          \"file\": \"$file\",
                          \"line\": $LINE
                        }
                      }
                    },
                    \"Raw\": \"REDACTED\",
                    \"Verified\": false
                  }" >> scan-results/sensitive-results.json
                fi
              fi
            done < scan-results/sensitive-files.txt
          else
            echo "[]" > scan-results/sensitive-results.json
          fi
      
      - name: Combine all results
        run: |
          echo "Combining all scanning results..."
          # Merge all scan results
          cat scan-results/trufflehog-all.json scan-results/gitleaks-formatted.json scan-results/sensitive-results.json | grep -v "^$" > scan-results/all-secrets.json || true
          
          # Count total unique files with issues
          FILES=$(cat scan-results/all-secrets.json | jq -r '.SourceMetadata.Data.Filesystem.file // .SourceMetadata.Data.Git.file' 2>/dev/null | sort | uniq | wc -l)
          TOTAL=$(cat scan-results/all-secrets.json | grep -v "^$" | wc -l)
          VERIFIED=$(cat scan-results/all-secrets.json | grep -v "^$" | grep -c '"Verified":true' || echo "0")
          
          echo "Found $TOTAL potential secrets in $FILES files ($VERIFIED verified)"
          
          if [ "$TOTAL" -gt 0 ]; then
            echo "::warning::Found $TOTAL potential secrets in $FILES files!"
          fi
      
      - name: Generate simple report
        run: |
          # Create a very simple text report
          echo "=========================" > scan-results/simple-report.txt
          echo "SECURITY SCAN REPORT" >> scan-results/simple-report.txt
          echo "=========================" >> scan-results/simple-report.txt
          echo "Scan date: $(date)" >> scan-results/simple-report.txt
          echo "" >> scan-results/simple-report.txt
          
          TOTAL=$(cat scan-results/all-secrets.json | grep -v "^$" | wc -l || echo "0")
          VERIFIED=$(cat scan-results/all-secrets.json | grep -v "^$" | grep -c '"Verified":true' || echo "0")
          
          if [ "$TOTAL" -gt 0 ]; then
            echo "‚ö†Ô∏è FOUND $TOTAL POTENTIAL SECRETS ($VERIFIED VERIFIED)" >> scan-results/simple-report.txt
            echo "" >> scan-results/simple-report.txt
            
            echo "TOP FILES WITH SECRETS:" >> scan-results/simple-report.txt
            echo "----------------------" >> scan-results/simple-report.txt
            cat scan-results/all-secrets.json | jq -r '.SourceMetadata.Data.Filesystem.file // .SourceMetadata.Data.Git.file' 2>/dev/null | sort | uniq -c | sort -nr | head -10 | while read -r count file; do
              if [ -n "$file" ] && [ "$file" != "null" ]; then
                echo "‚Ä¢ $file ($count issues)" >> scan-results/simple-report.txt
              fi
            done
            echo "" >> scan-results/simple-report.txt
            
            echo "SECRET TYPES FOUND:" >> scan-results/simple-report.txt
            echo "-----------------" >> scan-results/simple-report.txt
            cat scan-results/all-secrets.json | jq -r '.DetectorName' 2>/dev/null | sort | uniq -c | sort -nr | while read -r count type; do
              if [ -n "$type" ] && [ "$type" != "null" ]; then
                echo "‚Ä¢ $type: $count" >> scan-results/simple-report.txt
              fi
            done
            echo "" >> scan-results/simple-report.txt
            
            echo "DETAILED FINDINGS:" >> scan-results/simple-report.txt
            echo "-----------------" >> scan-results/simple-report.txt
            cat scan-results/all-secrets.json | grep -v "^$" | while read -r line; do
              # Extract data
              TYPE=$(echo "$line" | jq -r '.DetectorName // "Unknown"' 2>/dev/null)
              VERIFIED=$(echo "$line" | jq -r '.Verified // false' 2>/dev/null)
              
              # Get file and line info
              FILE=$(echo "$line" | jq -r '.SourceMetadata.Data.Filesystem.file // .SourceMetadata.Data.Git.file // "Unknown"' 2>/dev/null)
              LINE=$(echo "$line" | jq -r '.SourceMetadata.Data.Filesystem.line // .SourceMetadata.Data.Git.line // "?"' 2>/dev/null)
              
              # Format verification status
              if [ "$VERIFIED" = "true" ]; then
                STATUS="‚úì VERIFIED"
              else
                STATUS="POTENTIAL"
              fi
              
              echo "‚Üí $TYPE in $FILE (line $LINE) - $STATUS" >> scan-results/simple-report.txt
            done
          else
            echo "‚úÖ NO SECRETS FOUND" >> scan-results/simple-report.txt
          fi
          
          echo "" >> scan-results/simple-report.txt
          echo "HOW TO FIX:" >> scan-results/simple-report.txt
          echo "----------" >> scan-results/simple-report.txt
          echo "1. Remove credentials from code" >> scan-results/simple-report.txt
          echo "2. Add sensitive files to .gitignore" >> scan-results/simple-report.txt
          echo "3. Use environment variables for secrets" >> scan-results/simple-report.txt
          echo "4. Rotate any exposed credentials" >> scan-results/simple-report.txt
      
      - name: Generate detailed HTML report
        run: |
          cat << EOF > scan-results/detailed-report.html
          <!DOCTYPE html>
          <html>
          <head>
            <title>Security Scan Report</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 20px; line-height: 1.6; }
              table { border-collapse: collapse; width: 100%; margin-bottom: 20px; }
              th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
              th { background-color: #f2f2f2; }
              .verified { background-color: #ffdddd; }
              .potential { background-color: #ffffdd; }
              h1, h2, h3 { color: #333; }
              .summary { background-color: #f8f8f8; padding: 15px; border-radius: 5px; margin-bottom: 20px; }
              .high { color: red; font-weight: bold; }
              .medium { color: orange; }
            </style>
          </head>
          <body>
            <h1>Security Scan Report</h1>
            <p>Scan date: $(date)</p>
            
            <div class="summary">
          EOF
          
          # Add summary section
          TOTAL=$(cat scan-results/all-secrets.json | grep -v "^$" | wc -l || echo "0")
          VERIFIED=$(cat scan-results/all-secrets.json | grep -v "^$" | grep -c '"Verified":true' || echo "0")
          FILES=$(cat scan-results/all-secrets.json | jq -r '.SourceMetadata.Data.Filesystem.file // .SourceMetadata.Data.Git.file' 2>/dev/null | sort | uniq | wc -l)
          
          if [ "$TOTAL" -gt 0 ]; then
            echo "<h2>üö® Found $TOTAL potential secrets in $FILES files</h2>" >> scan-results/detailed-report.html
            echo "<p><span class='high'>$VERIFIED verified secrets</span> require immediate attention.</p>" >> scan-results/detailed-report.html
          else
            echo "<h2>‚úÖ No secrets found</h2>" >> scan-results/detailed-report.html
            echo "<p>Your code appears to be free from exposed secrets and credentials.</p>" >> scan-results/detailed-report.html
          fi
          
          echo "</div>" >> scan-results/detailed-report.html
          
          # Only add details if we found secrets
          if [ "$TOTAL" -gt 0 ]; then
            # Add file summary
            echo "<h3>Files with Secrets:</h3>" >> scan-results/detailed-report.html
            echo "<table>" >> scan-results/detailed-report.html
            echo "<tr><th>File</th><th>Issues</th><th>Verified</th></tr>" >> scan-results/detailed-report.html
            
            # Process each file with issues
            cat scan-results/all-secrets.json | jq -r '.SourceMetadata.Data.Filesystem.file // .SourceMetadata.Data.Git.file' 2>/dev/null | sort | uniq > scan-results/affected-files.txt
            
            while read -r file; do
              if [ -n "$file" ] && [ "$file" != "null" ]; then
                # Count issues in this file
                ISSUES=$(cat scan-results/all-secrets.json | grep "\"$file\"" | wc -l)
                VERIFIED_ISSUES=$(cat scan-results/all-secrets.json | grep "\"$file\"" | grep -c '"Verified":true' || echo "0")
                
                # Add row to table
                echo "<tr>" >> scan-results/detailed-report.html
                echo "<td>$file</td>" >> scan-results/detailed-report.html
                echo "<td>$ISSUES</td>" >> scan-results/detailed-report.html
                
                if [ "$VERIFIED_ISSUES" -gt 0 ]; then
                  echo "<td class='high'>$VERIFIED_ISSUES</td>" >> scan-results/detailed-report.html
                else
                  echo "<td>0</td>" >> scan-results/detailed-report.html
                fi
                
                echo "</tr>" >> scan-results/detailed-report.html
              fi
            done < scan-results/affected-files.txt
            
            echo "</table>" >> scan-results/detailed-report.html
            
            # Add detailed findings
            echo "<h3>Detailed Findings:</h3>" >> scan-results/detailed-report.html
            echo "<table>" >> scan-results/detailed-report.html
            echo "<tr><th>Type</th><th>File</th><th>Line</th><th>Status</th></tr>" >> scan-results/detailed-report.html
            
            cat scan-results/all-secrets.json | grep -v "^$" | while read -r line; do
              # Extract data
              TYPE=$(echo "$line" | jq -r '.DetectorName // "Unknown"' 2>/dev/null)
              VERIFIED=$(echo "$line" | jq -r '.Verified // false' 2>/dev/null)
              
              # Get file and line info
              FILE=$(echo "$line" | jq -r '.SourceMetadata.Data.Filesystem.file // .SourceMetadata.Data.Git.file // "Unknown"' 2>/dev/null)
              LINE=$(echo "$line" | jq -r '.SourceMetadata.Data.Filesystem.line // .SourceMetadata.Data.Git.line // "?"' 2>/dev/null)
              
              # Set row class and status
              if [ "$VERIFIED" = "true" ]; then
                CLASS="verified"
                STATUS="<span class='high'>VERIFIED</span>"
              else
                CLASS="potential"
                STATUS="<span class='medium'>POTENTIAL</span>"
              fi
              
              # Add row to table
              echo "<tr class='$CLASS'>" >> scan-results/detailed-report.html
              echo "<td>$TYPE</td>" >> scan-results/detailed-report.html
              echo "<td>$FILE</td>" >> scan-results/detailed-report.html
              echo "<td>$LINE</td>" >> scan-results/detailed-report.html
              echo "<td>$STATUS</td>" >> scan-results/detailed-report.html
              echo "</tr>" >> scan-results/detailed-report.html
            done
            
            echo "</table>" >> scan-results/detailed-report.html
            
            # Add remediation advice
            echo "<h3>How to Fix These Issues:</h3>" >> scan-results/detailed-report.html
            echo "<ol>" >> scan-results/detailed-report.html
            echo "<li><strong>Remove all credentials</strong> from your code and configuration files</li>" >> scan-results/detailed-report.html
            echo "<li><strong>Use environment variables</strong> for all sensitive information</li>" >> scan-results/detailed-report.html
            echo "<li><strong>Add sensitive files</strong> (.env, config files with credentials) to .gitignore</li>" >> scan-results/detailed-report.html
            echo "<li><strong>Rotate any exposed credentials</strong> immediately</li>" >> scan-results/detailed-report.html
            echo "<li><strong>Consider using a secret manager</strong> for your production environment</li>" >> scan-results/detailed-report.html
            echo "</ol>" >> scan-results/detailed-report.html
          fi
          
          echo "</body></html>" >> scan-results/detailed-report.html

      - name: Upload scan reports
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-reports
          path: |
            scan-results/simple-report.txt
            scan-results/detailed-report.html
            scan-results/all-secrets.json
          retention-days: 30
