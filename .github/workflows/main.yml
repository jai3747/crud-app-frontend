# # name: TruffleHog Comprehensive Secret Scanning

# # on:
# #   push:
# #     branches: [ main, master ]
# #   pull_request:
# #     branches: [ main, master ]
# #   schedule:
# #     - cron: '0 0 * * 0'  # Run weekly on Sunday at midnight
# #   workflow_dispatch:  # Allow manual triggering

# # jobs:
# #   secret-scan:
# #     name: üîç Complete Secret Scan
# #     runs-on: ubuntu-latest
# #     strategy:
# #       matrix:
# #         repo: 
# #           - {name: 'frontend', path: 'jai3747/crud-app-frontend'}
# #           - {name: 'backend', path: 'jai3747/crud-app-backend'}
# #       fail-fast: false
    
# #     steps:
# #       - name: Clean workspace
# #         run: |
# #           rm -rf * 
# #           rm -rf .git
        
# #       - name: Checkout Code
# #         uses: actions/checkout@v4
# #         with:
# #           repository: ${{ matrix.repo.path }}
# #           token: ${{ secrets.GH_PAT }}
# #           fetch-depth: 0  # Full history
# #           clean: true
# #           force: true
      
# #       - name: Install jq
# #         run: |
# #           sudo apt-get update
# #           sudo apt-get install -y jq
        
# #       - name: TruffleHog Direct Scan
# #         id: trufflehog_scan
# #         run: |
# #           # Install TruffleHog
# #           curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin

# #           # Run both git and filesystem scans to catch all secrets
# #           echo "Running git history scan..."
# #           trufflehog git file://. --json --no-update --include-detectors all > git-scan-results.json || true
          
# #           echo "Running filesystem scan (including .env files)..."
# #           trufflehog filesystem --directory=. --json --include-detectors all > fs-scan-results.json || true
          
# #           # Combine results
# #           echo "Combining results..."
# #           cat git-scan-results.json fs-scan-results.json > all-results.json
          
# #           # Create report
# #           echo "# Secret Scanning Report for ${{ matrix.repo.path }}" > secret-report.md
# #           echo "Scan completed on: $(date)" >> secret-report.md
# #           echo "" >> secret-report.md
          
# #           if [ -s all-results.json ]; then
# #             # Count unique secrets
# #             SECRET_COUNT=$(cat all-results.json | grep -v "^$" | wc -l)
# #             echo "## ‚ö†Ô∏è $SECRET_COUNT potential secrets found!" >> secret-report.md
# #             echo "" >> secret-report.md
            
# #             # Create a details table
# #             echo "| Secret Type | Source | File | Line | Severity |" >> secret-report.md
# #             echo "|------------|--------|------|------|----------|" >> secret-report.md
            
# #             # Process each finding
# #             cat all-results.json | grep -v "^$" | while read -r line; do
# #               DETECTOR=$(echo $line | jq -r '.DetectorType // "Unknown"')
# #               SOURCE=$(echo $line | jq -r '.SourceType // "Unknown"')
# #               FILE=$(echo $line | jq -r '.SourceMetadata.Data.Filename // .SourceMetadata.Data.Path // "Unknown"')
# #               LINE=$(echo $line | jq -r '.SourceMetadata.Data.Line // "N/A"')
# #               VERIFIED=$(echo $line | jq -r '.Verified // false')
              
# #               # Determine severity
# #               if [ "$VERIFIED" = "true" ]; then
# #                 SEVERITY="üî¥ High"
# #               else
# #                 SEVERITY="üü° Medium"
# #               fi
              
# #               echo "| $DETECTOR | $SOURCE | $FILE | $LINE | $SEVERITY |" >> secret-report.md
# #             done
            
# #             echo "" >> secret-report.md
# #             echo "## üö® Remediation Steps" >> secret-report.md
# #             echo "" >> secret-report.md
# #             echo "1. **Remove all hardcoded secrets** from your codebase, including .env files that might be committed" >> secret-report.md
# #             echo "2. **Revoke all exposed credentials** immediately" >> secret-report.md
# #             echo "3. **Replace with environment variables** or a secure secret management system" >> secret-report.md
# #             echo "4. **Add .env files to .gitignore** to prevent future commits" >> secret-report.md
# #             echo "5. **Consider using git-filter-repo** to remove secrets from git history" >> secret-report.md
            
# #             echo "secrets_found=true" >> $GITHUB_OUTPUT
# #             echo "::warning::$SECRET_COUNT potential secrets found in ${{ matrix.repo.path }}"
# #           else
# #             echo "## ‚úÖ No secrets found" >> secret-report.md
# #             echo "" >> secret-report.md
# #             echo "No secrets or credentials were detected in this repository." >> secret-report.md
# #             echo "secrets_found=false" >> $GITHUB_OUTPUT
# #           fi
        
# #       - name: Upload Raw Results
# #         uses: actions/upload-artifact@v4
# #         with:
# #           name: ${{ matrix.repo.name }}-raw-results
# #           path: all-results.json
# #           retention-days: 30
          
# #       - name: Upload Report
# #         uses: actions/upload-artifact@v4
# #         with:
# #           name: ${{ matrix.repo.name }}-secret-report
# #           path: secret-report.md
# #           retention-days: 30
        
# #       - name: Fail if verified secrets found
# #         if: steps.trufflehog_scan.outputs.secrets_found == 'true'
# #         run: |
# #           echo "::error::Secrets found in ${{ matrix.repo.path }}! Check the artifacts for details."
# #           echo "Displaying the first few findings:"
# #           head -n 10 all-results.json
# #           exit 1
  
# #   summary-report:
# #     name: üìä Summary Report
# #     needs: secret-scan
# #     runs-on: ubuntu-latest
# #     if: always()
# #     steps:
# #       - name: Download all artifacts
# #         uses: actions/download-artifact@v4
# #         with:
# #           path: all-reports
          
# #       - name: Generate summary report
# #         run: |
# #           echo "# üîí Secret Scanning Summary" > summary-report.md
# #           echo "Generated: $(date)" >> summary-report.md
# #           echo "" >> summary-report.md
          
# #           # Check Frontend
# #           if [ -s "all-reports/frontend-raw-results/all-results.json" ]; then
# #             FRONTEND_COUNT=$(cat all-reports/frontend-raw-results/all-results.json | grep -v "^$" | wc -l)
# #             echo "## Frontend Repository: ‚ö†Ô∏è $FRONTEND_COUNT potential secrets found" >> summary-report.md
# #             echo "üìã [View detailed report](../artifact/frontend-secret-report/secret-report.md)" >> summary-report.md
# #           else
# #             echo "## Frontend Repository: ‚úÖ No secrets found" >> summary-report.md
# #           fi
          
# #           echo "" >> summary-report.md
          
# #           # Check Backend
# #           if [ -s "all-reports/backend-raw-results/all-results.json" ]; then
# #             BACKEND_COUNT=$(cat all-reports/backend-raw-results/all-results.json | grep -v "^$" | wc -l)
# #             echo "## Backend Repository: ‚ö†Ô∏è $BACKEND_COUNT potential secrets found" >> summary-report.md
# #             echo "üìã [View detailed report](../artifact/backend-secret-report/secret-report.md)" >> summary-report.md
# #           else
# #             echo "## Backend Repository: ‚úÖ No secrets found" >> summary-report.md
# #           fi
          
# #           echo "" >> summary-report.md
# #           echo "## Next Steps" >> summary-report.md
# #           echo "" >> summary-report.md
# #           echo "- Review all findings in the detailed reports" >> summary-report.md
# #           echo "- Remove all hardcoded secrets and credentials" >> summary-report.md
# #           echo "- Use environment variables or secret management tools" >> summary-report.md
# #           echo "- Update your .gitignore to prevent committing sensitive files" >> summary-report.md
          
# #       - name: Upload Summary Report
# #         uses: actions/upload-artifact@v4
# #         with:
# #           name: secret-scan-summary
# #           path: summary-report.md
# #           retention-days: 30
# name: TruffleHog Secret Scanning

# on:
#   push:
#     branches: [ main, master ]
#   pull_request:
#     branches: [ main, master ]
#   schedule:
#     - cron: '0 0 * * 0'  # Run weekly on Sunday at midnight
#   workflow_dispatch:  # Allow manual triggering

# jobs:
#   secret-scan:
#     name: üîç Secret Scan
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         repo: 
#           - {name: 'frontend', path: 'jai3747/crud-app-frontend'}
#           - {name: 'backend', path: 'jai3747/crud-app-backend'}
#       fail-fast: false
    
#     steps:
#       - name: Clean workspace
#         run: |
#           rm -rf * 
#           rm -rf .git
        
#       - name: Checkout Code
#         uses: actions/checkout@v4
#         with:
#           repository: ${{ matrix.repo.path }}
#           token: ${{ secrets.GH_PAT }}
#           fetch-depth: 0  # Full history
#           clean: true
#           force: true
      
#       - name: Install dependencies
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y jq
        
#       - name: Run TruffleHog Scan
#         id: trufflehog_scan
#         run: |
#           # Install TruffleHog
#           curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin

#           # Create .trufflehog-ignore file to exclude false positives
#           cat << EOF > .trufflehog-ignore
#           node_modules/
#           **/test/**
#           **/tests/**
#           **/docs/**
#           **/examples/**
#           **/*.md
#           EOF
          
#           # Create output directories
#           mkdir -p scan-results
          
#           # Run git scan with ignore patterns
#           echo "Running git history scan..."
#           trufflehog git file://. \
#             --json \
#             --no-update \
#             --include-detectors all \
#             --exclude-paths .trufflehog-ignore > scan-results/git-scan-results.json || true
          
#           # Run filesystem scan focusing on important files
#           echo "Running filesystem scan for sensitive files..."
#           trufflehog filesystem \
#             --directory=. \
#             --json \
#             --include-detectors all \
#             --exclude-paths .trufflehog-ignore \
#             --include-paths "**/.env,**/.env.*,**/config.*,**/*.config.js,**/*.yml,**/*.yaml,**/*.json" > scan-results/fs-scan-results.json || true
          
#           # Combine and filter results (only include non-empty lines)
#           echo "Processing results..."
#           cat scan-results/git-scan-results.json scan-results/fs-scan-results.json | grep -v "^$" > scan-results/all-raw-results.json
          
#           # Filter out false positives and create clean results
#           cat scan-results/all-raw-results.json | jq -c '
#             select(
#               (.SourceMetadata.Data.Filesystem.file | contains("node_modules") | not) and
#               (.SourceMetadata.Data.Git.file | contains("node_modules") | not)
#             )
#           ' > scan-results/cleaned-results.json
          
#           # Count results - empty file check
#           if [ ! -s scan-results/cleaned-results.json ]; then
#             echo "secrets_found=false" >> $GITHUB_OUTPUT
#             echo "verified_secrets_found=0" >> $GITHUB_OUTPUT
#             echo "total_secrets=0" >> $GITHUB_OUTPUT
#             echo "::notice::No secrets found in ${{ matrix.repo.name }} repository."
#           else
#             # Count total and verified secrets
#             TOTAL_COUNT=$(cat scan-results/cleaned-results.json | grep -v "^$" | wc -l)
#             VERIFIED_COUNT=$(cat scan-results/cleaned-results.json | grep -v "^$" | grep -c '"Verified":true' || echo "0")
            
#             echo "secrets_found=true" >> $GITHUB_OUTPUT
#             echo "verified_secrets_found=$VERIFIED_COUNT" >> $GITHUB_OUTPUT
#             echo "total_secrets=$TOTAL_COUNT" >> $GITHUB_OUTPUT
            
#             if [ "$VERIFIED_COUNT" -gt 0 ]; then
#               echo "::warning::$TOTAL_COUNT potential secrets found in ${{ matrix.repo.name }}, including $VERIFIED_COUNT verified credentials!"
#             else
#               echo "::notice::$TOTAL_COUNT potential secrets found in ${{ matrix.repo.name }}, none verified."
#             fi
#           fi

#       - name: Generate Report
#         if: always()
#         run: |
#           echo "# Security Scan Report for ${{ matrix.repo.name }}" > security-report.md
#           echo "Repository: ${{ matrix.repo.path }}" >> security-report.md
#           echo "Scan completed on: $(date)" >> security-report.md
#           echo "" >> security-report.md
          
#           if [ -s scan-results/cleaned-results.json ]; then
#             TOTAL_COUNT=$(cat scan-results/cleaned-results.json | grep -v "^$" | wc -l)
#             VERIFIED_COUNT=$(cat scan-results/cleaned-results.json | grep -v "^$" | grep -c '"Verified":true' || echo "0")
            
#             echo "## Summary" >> security-report.md
#             echo "" >> security-report.md
#             echo "* **Total potential secrets:** $TOTAL_COUNT" >> security-report.md
#             echo "* **Verified credentials:** $VERIFIED_COUNT" >> security-report.md
#             echo "" >> security-report.md
            
#             echo "## Detected Issues" >> security-report.md
#             echo "" >> security-report.md
#             echo "| Type | Location | Verified | Severity |" >> security-report.md
#             echo "|------|----------|----------|----------|" >> security-report.md
            
#             # Process results to create table
#             cat scan-results/cleaned-results.json | jq -r '
#               [
#                 .DetectorName,
#                 (if .SourceMetadata.Data.Filesystem then .SourceMetadata.Data.Filesystem.file else .SourceMetadata.Data.Git.file end) + ":" +
#                 (if .SourceMetadata.Data.Filesystem then .SourceMetadata.Data.Filesystem.line | tostring else .SourceMetadata.Data.Git.line | tostring end),
#                 (if .Verified == true then "‚úì Yes" else "‚úó No" end),
#                 (if .Verified == true then "üî¥ High" else "üü° Medium" end)
#               ] | @tsv
#             ' | sort | while IFS=$'\t' read -r detector location verified severity; do
#               echo "| $detector | $location | $verified | $severity |" >> security-report.md
#             done
            
#             echo "" >> security-report.md
#             echo "## Remediation Guide" >> security-report.md
#             echo "" >> security-report.md
            
#             # Check for specific credential types and provide targeted advice
            
#             # MongoDB specific remediation
#             if cat scan-results/cleaned-results.json | grep -q '"DetectorName":"MongoDB"'; then
#               echo "### MongoDB Credentials" >> security-report.md
#               echo "" >> security-report.md
#               echo "1. **Remove MongoDB connection strings** from your code and config files" >> security-report.md
#               echo "2. **Add `.env` to your `.gitignore`** file immediately" >> security-report.md
#               echo "3. **Rotate your MongoDB credentials** in your Atlas dashboard" >> security-report.md
#               echo "4. **Use environment variables** for database connections" >> security-report.md
#               echo "" >> security-report.md
#               echo "Example proper implementation:" >> security-report.md
#               echo "" >> security-report.md
#               echo '```javascript' >> security-report.md
#               echo '// .env file (add to .gitignore!)' >> security-report.md
#               echo 'MONGODB_URI=mongodb+srv://username:password@cluster.mongodb.net/database' >> security-report.md
#               echo '' >> security-report.md
#               echo '// In your code' >> security-report.md
#               echo 'require("dotenv").config();' >> security-report.md
#               echo 'mongoose.connect(process.env.MONGODB_URI);' >> security-report.md
#               echo '```' >> security-report.md
#               echo "" >> security-report.md
#             fi
            
#             # GitHub specific remediation
#             if cat scan-results/cleaned-results.json | grep -q '"DetectorName":"Github"'; then
#               echo "### GitHub Tokens" >> security-report.md
#               echo "" >> security-report.md
#               echo "1. **Revoke the exposed GitHub token** immediately at https://github.com/settings/tokens" >> security-report.md
#               echo "2. **Create a new token** with minimal required permissions" >> security-report.md
#               echo "3. **Use repository secrets** to store tokens for CI/CD workflows" >> security-report.md
#               echo "4. **Use fine-grained tokens** for better security" >> security-report.md
#               echo "" >> security-report.md
#               echo "Example using GitHub secrets:" >> security-report.md
#               echo "" >> security-report.md
#               echo '```yaml' >> security-report.md
#               echo '# In GitHub workflow file' >> security-report.md
#               echo 'steps:' >> security-report.md
#               echo '  - name: Checkout' >> security-report.md
#               echo '    uses: actions/checkout@v4' >> security-report.md
#               echo '    with:' >> security-report.md
#               echo '      token: ${{ secrets.GITHUB_TOKEN }}' >> security-report.md
#               echo '```' >> security-report.md
#               echo "" >> security-report.md
#             fi
            
#             # General remediation advice
#             echo "### General Security Practices" >> security-report.md
#             echo "" >> security-report.md
#             echo "1. **Never commit credentials** to your repository" >> security-report.md
#             echo "2. **Use environment variables** for all sensitive configuration" >> security-report.md
#             echo "3. **Set up pre-commit hooks** to prevent committing secrets" >> security-report.md
#             echo "   - Consider using [pre-commit](https://pre-commit.com/) with TruffleHog" >> security-report.md
#             echo "4. **Implement secret rotation** policies for all credentials" >> security-report.md
#             echo "5. **Use a password manager** for team credential sharing" >> security-report.md
#           else
#             echo "## ‚úÖ No security issues found" >> security-report.md
#             echo "" >> security-report.md
#             echo "No secrets or credentials were detected in this repository." >> security-report.md
#           fi
          
#       - name: Upload Detailed Results
#         uses: actions/upload-artifact@v4
#         with:
#           name: ${{ matrix.repo.name }}-security-scan
#           path: |
#             scan-results/cleaned-results.json
#             security-report.md
#           retention-days: 30
        
#       - name: Flag verified secrets without pipeline failure
#         if: steps.trufflehog_scan.outputs.verified_secrets_found != '0'
#         run: |
#           echo "::warning::Verified secrets found in ${{ matrix.repo.name }}! These require immediate attention."
#           echo "See the detailed report in artifacts for remediation steps."
#           # Not using exit 1 to prevent pipeline failure
  
#   summary-report:
#     name: üìä Security Summary
#     needs: secret-scan
#     runs-on: ubuntu-latest
#     if: always()
#     steps:
#       - name: Download all artifacts
#         uses: actions/download-artifact@v4
#         with:
#           path: all-reports
          
#       - name: Generate summary report
#         run: |
#           echo "# üîí Security Scan Summary" > security-summary.md
#           echo "Generated: $(date)" >> security-summary.md
#           echo "" >> security-summary.md
          
#           FOUND_ISSUES=false
          
#           # Process each repository
#           for REPO in frontend backend; do
#             RESULTS_FILE="all-reports/${REPO}-security-scan/cleaned-results.json"
#             REPORT_FILE="all-reports/${REPO}-security-scan/security-report.md"
            
#             echo "## ${REPO^} Repository" >> security-summary.md
#             echo "" >> security-summary.md
            
#             if [ -f "$RESULTS_FILE" ] && [ -s "$RESULTS_FILE" ]; then
#               FOUND_ISSUES=true
#               TOTAL=$(cat "$RESULTS_FILE" | grep -v "^$" | wc -l)
#               VERIFIED=$(cat "$RESULTS_FILE" | grep -v "^$" | grep -c '"Verified":true' || echo "0")
              
#               if [ "$VERIFIED" -gt 0 ]; then
#                 echo "‚ö†Ô∏è **Found $TOTAL potential secrets, including $VERIFIED verified credentials**" >> security-summary.md
#               else
#                 echo "‚ö†Ô∏è **Found $TOTAL potential secrets (none verified)**" >> security-summary.md
#               fi
#               echo "" >> security-summary.md
              
#               # Extract detector types
#               echo "### Issue Types:" >> security-summary.md
#               cat "$RESULTS_FILE" | jq -r '.DetectorName' | sort | uniq -c | sort -nr | head -5 | while read -r count detector; do
#                 if cat "$RESULTS_FILE" | jq -r 'select(.DetectorName == "'"$detector"'" and .Verified == true) | .DetectorName' | grep -q "$detector"; then
#                   echo "- üî¥ **$count $detector** (verified credentials found)" >> security-summary.md
#                 else
#                   echo "- üü° $count $detector" >> security-summary.md
#                 fi
#               done
              
#               echo "" >> security-summary.md
#               echo "See detailed report in artifacts for specific file locations." >> security-summary.md
#             else
#               echo "‚úÖ No security issues found" >> security-summary.md
#             fi
#             echo "" >> security-summary.md
#           done
          
#           echo "## Next Steps" >> security-summary.md
#           echo "" >> security-summary.md
          
#           if [ "$FOUND_ISSUES" = true ]; then
#             echo "### üö® Priority Actions" >> security-summary.md
#             echo "" >> security-summary.md
#             echo "1. **Download the detailed reports** from the artifacts" >> security-summary.md
#             echo "2. **Take immediate action** on any verified credentials (marked üî¥)" >> security-summary.md
#             echo "3. **Review all potential secrets** and confirm if they are real or false positives" >> security-summary.md
#             echo "4. **Implement the recommended fixes** from the detailed reports" >> security-summary.md
#           else
#             echo "### ‚úÖ Maintain Security" >> security-summary.md
#             echo "" >> security-summary.md
#             echo "1. **Continue regular scanning** with this workflow" >> security-summary.md
#             echo "2. **Set up pre-commit hooks** to prevent accidental secret commits" >> security-summary.md
#             echo "3. **Train team members** on secure credential handling" >> security-summary.md
#           fi
          
#           echo "" >> security-summary.md
#           echo "### üõ°Ô∏è Best Practices" >> security-summary.md
#           echo "" >> security-summary.md
#           echo "- **Store secrets in environment variables** or dedicated secret management systems" >> security-summary.md
#           echo "- **Add sensitive files to .gitignore** (.env, config files with credentials)" >> security-summary.md
#           echo "- **Use GitHub Secrets** for CI/CD credentials" >> security-summary.md
#           echo "- **Implement regular credential rotation** as part of your security practice" >> security-summary.md
          
#       - name: Upload Summary Report
#         uses: actions/upload-artifact@v4
#         with:
#           name: security-scan-summary
#           path: security-summary.md
#           retention-days: 30
name: TruffleHog Secret Scanning

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sunday at midnight
  workflow_dispatch:  # Allow manual triggering

jobs:
  secret-scan:
    name: üîç Secret Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repo: 
          - {name: 'frontend', path: 'jai3747/crud-app-frontend'}
          - {name: 'backend', path: 'jai3747/crud-app-backend'}
      fail-fast: false
    
    steps:
      - name: Clean workspace
        run: |
          rm -rf * 
          rm -rf .git
        
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          repository: ${{ matrix.repo.path }}
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0  # Full history
          clean: true
          force: true
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
        
      - name: Run TruffleHog Scan
        id: trufflehog_scan
        run: |
          # Install TruffleHog
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin

          # Create directories for results
          mkdir -p scan-results
          touch scan-results/git-scan-results.json
          touch scan-results/fs-scan-results.json
          
          # Create trufflehog-ignore.txt file (using plain glob patterns)
          cat << EOF > trufflehog-ignore.txt
          node_modules/
          test/
          tests/
          docs/
          examples/
          *.md
          EOF
          
          # Run git scan (ignore errors)
          echo "Running git history scan..."
          trufflehog git file://. \
            --json \
            --no-update \
            --exclude-paths trufflehog-ignore.txt > scan-results/git-scan-results.json || true
          
          # Run filesystem scan for each file pattern separately
          echo "Running filesystem scan for sensitive files..."
          
          # Scan .env files
          trufflehog filesystem . \
            --json \
            --exclude-paths trufflehog-ignore.txt \
            --only-verified > scan-results/env-files.json || true
          
          # Scan config files
          trufflehog filesystem . \
            --json \
            --exclude-paths trufflehog-ignore.txt \
            --only-verified > scan-results/config-files.json || true
          
          # Combine all results
          cat scan-results/git-scan-results.json scan-results/env-files.json scan-results/config-files.json | grep -v "^$" > scan-results/all-raw-results.json || true
          
          # Process results
          echo "Processing results..."
          # Create empty file to avoid errors if no results
          touch scan-results/cleaned-results.json
          
          # Check if there are any results
          if [ -s scan-results/all-raw-results.json ]; then
            # Filter results
            cat scan-results/all-raw-results.json | jq -c '.' | grep -v "null" > scan-results/cleaned-results.json || true
          fi
          
          # Count results - handle empty file
          if [ ! -s scan-results/cleaned-results.json ]; then
            echo "secrets_found=false" >> $GITHUB_OUTPUT
            echo "verified_secrets_found=0" >> $GITHUB_OUTPUT
            echo "total_secrets=0" >> $GITHUB_OUTPUT
            echo "::notice::No secrets found in ${{ matrix.repo.name }} repository."
          else
            # Count total and verified secrets
            TOTAL_COUNT=$(cat scan-results/cleaned-results.json | grep -v "^$" | wc -l)
            VERIFIED_COUNT=$(cat scan-results/cleaned-results.json | grep -v "^$" | grep -c '"Verified":true' || echo "0")
            
            echo "secrets_found=true" >> $GITHUB_OUTPUT
            echo "verified_secrets_found=$VERIFIED_COUNT" >> $GITHUB_OUTPUT
            echo "total_secrets=$TOTAL_COUNT" >> $GITHUB_OUTPUT
            
            if [ "$VERIFIED_COUNT" -gt 0 ]; then
              echo "::warning::$TOTAL_COUNT potential secrets found in ${{ matrix.repo.name }}, including $VERIFIED_COUNT verified credentials!"
            else
              echo "::notice::$TOTAL_COUNT potential secrets found in ${{ matrix.repo.name }}, none verified."
            fi
          fi

      - name: Run Additional Scans for Sensitive Files
        run: |
          # Create list of sensitive file patterns
          echo "Scanning specifically for .env files and config files..."
          
          # Find potential sensitive files
          find . -type f -name ".env*" -o -name "*.config.js" -o -name "config.*" -o -name "*.yml" -o -name "*.yaml" -o -name "*.json" | grep -v "node_modules" > sensitive-files.txt
          
          # Initialize results file
          echo "[]" > scan-results/manual-scan-results.json
          
          # Check each file for potential secrets
          while read -r file; do
            if [ -f "$file" ]; then
              # Look for MongoDB connection strings
              if grep -q "mongodb[s]\?:\/\/[a-zA-Z0-9\.\-_]\+:[a-zA-Z0-9\.\-_]\+@" "$file"; then
                echo "{ \"DetectorName\": \"MongoDB\", \"SourceMetadata\": { \"Data\": { \"Filesystem\": { \"file\": \"$file\", \"line\": $(grep -n "mongodb[s]\?:\/\/" "$file" | cut -d: -f1) } } }, \"Verified\": true }" >> scan-results/manual-scan-results.json
              fi
              
              # Look for GitHub tokens
              if grep -q "ghp_[a-zA-Z0-9]\+" "$file" || grep -q "github_pat_[a-zA-Z0-9_]\+" "$file"; then
                echo "{ \"DetectorName\": \"Github\", \"SourceMetadata\": { \"Data\": { \"Filesystem\": { \"file\": \"$file\", \"line\": $(grep -n "ghp_\\|github_pat_" "$file" | cut -d: -f1) } } }, \"Verified\": true }" >> scan-results/manual-scan-results.json
              fi
              
              # Look for API keys
              if grep -q "api[_-]\?key[\"'=: ]\+[a-zA-Z0-9_\-]\+" "$file"; then
                echo "{ \"DetectorName\": \"Generic API Key\", \"SourceMetadata\": { \"Data\": { \"Filesystem\": { \"file\": \"$file\", \"line\": $(grep -n "api[_-]\\?key" "$file" | cut -d: -f1) } } }, \"Verified\": false }" >> scan-results/manual-scan-results.json
              fi
            fi
          done < sensitive-files.txt
          
          # Combine with other results
          cat scan-results/manual-scan-results.json >> scan-results/cleaned-results.json || true

      - name: Generate Report
        if: always()
        run: |
          echo "# Security Scan Report for ${{ matrix.repo.name }}" > security-report.md
          echo "Repository: ${{ matrix.repo.path }}" >> security-report.md
          echo "Scan completed: $(date)" >> security-report.md
          echo "" >> security-report.md
          
          if [ -s scan-results/cleaned-results.json ] && [ "$(cat scan-results/cleaned-results.json | grep -v "^$" | wc -l)" -gt 0 ]; then
            # Count results again to ensure accuracy
            TOTAL_COUNT=$(cat scan-results/cleaned-results.json | grep -v "^$" | wc -l)
            VERIFIED_COUNT=$(cat scan-results/cleaned-results.json | grep -v "^$" | grep -c '"Verified":true' || echo "0")
            
            echo "## üö® Security Issues Found" >> security-report.md
            echo "" >> security-report.md
            echo "* **Total potential secrets:** $TOTAL_COUNT" >> security-report.md
            echo "* **Verified credentials:** $VERIFIED_COUNT" >> security-report.md
            echo "" >> security-report.md
            
            echo "## Detected Issues" >> security-report.md
            echo "" >> security-report.md
            echo "| Type | File | Line | Verified | Severity |" >> security-report.md
            echo "|------|------|------|----------|----------|" >> security-report.md
            
            # Format each result as a table row
            cat scan-results/cleaned-results.json | grep -v "^$" | while read -r line; do
              # Extract data using temporary files to handle parsing errors
              echo "$line" > temp_line.json
              DETECTOR=$(jq -r '.DetectorName // "Unknown"' temp_line.json)
              
              # Check if it's from filesystem or git
              if jq -e '.SourceMetadata.Data.Filesystem' temp_line.json > /dev/null 2>&1; then
                FILE=$(jq -r '.SourceMetadata.Data.Filesystem.file // "Unknown"' temp_line.json)
                LINE_NUM=$(jq -r '.SourceMetadata.Data.Filesystem.line // "?"' temp_line.json)
              else
                FILE=$(jq -r '.SourceMetadata.Data.Git.file // "Unknown"' temp_line.json)
                LINE_NUM=$(jq -r '.SourceMetadata.Data.Git.line // "?"' temp_line.json)
              fi
              
              VERIFIED=$(jq -r '.Verified // false' temp_line.json)
              if [ "$VERIFIED" = "true" ]; then
                VERIFIED_TEXT="‚úì Yes"
                SEVERITY="üî¥ High"
              else
                VERIFIED_TEXT="‚úó No"
                SEVERITY="üü° Medium"
              fi
              
              echo "| $DETECTOR | $FILE | $LINE_NUM | $VERIFIED_TEXT | $SEVERITY |" >> security-report.md
            done
            
            # Remove temporary file
            rm -f temp_line.json
            
            echo "" >> security-report.md
            echo "## How to Fix These Issues" >> security-report.md
            echo "" >> security-report.md
            
            # MongoDB specific remediation
            if grep -q '"DetectorName":"MongoDB"' scan-results/cleaned-results.json; then
              echo "### MongoDB Credentials" >> security-report.md
              echo "" >> security-report.md
              echo "1. **Remove MongoDB connection strings** from your code and config files" >> security-report.md
              echo "2. **Add `.env` to your `.gitignore`** file immediately" >> security-report.md
              echo "3. **Rotate your MongoDB credentials** in your Atlas dashboard" >> security-report.md
              echo "4. **Use environment variables** for database connections" >> security-report.md
              echo "" >> security-report.md
              echo "Example proper implementation:" >> security-report.md
              echo "" >> security-report.md
              echo '```javascript' >> security-report.md
              echo '// .env file (add to .gitignore!)' >> security-report.md
              echo 'MONGODB_URI=mongodb+srv://username:password@cluster.mongodb.net/database' >> security-report.md
              echo '' >> security-report.md
              echo '// In your code' >> security-report.md
              echo 'require("dotenv").config();' >> security-report.md
              echo 'mongoose.connect(process.env.MONGODB_URI);' >> security-report.md
              echo '```' >> security-report.md
              echo "" >> security-report.md
            fi
            
            # GitHub specific remediation
            if grep -q '"DetectorName":"Github"' scan-results/cleaned-results.json; then
              echo "### GitHub Tokens" >> security-report.md
              echo "" >> security-report.md
              echo "1. **Revoke the exposed GitHub token** immediately at https://github.com/settings/tokens" >> security-report.md
              echo "2. **Create a new token** with minimal required permissions" >> security-report.md
              echo "3. **Use repository secrets** to store tokens for CI/CD workflows" >> security-report.md
              echo "4. **Use fine-grained tokens** for better security" >> security-report.md
              echo "" >> security-report.md
              echo "Example using GitHub secrets:" >> security-report.md
              echo "" >> security-report.md
              echo '```yaml' >> security-report.md
              echo '# In GitHub workflow file' >> security-report.md
              echo 'steps:' >> security-report.md
              echo '  - name: Checkout' >> security-report.md
              echo '    uses: actions/checkout@v4' >> security-report.md
              echo '    with:' >> security-report.md
              echo '      token: ${{ secrets.GITHUB_TOKEN }}' >> security-report.md
              echo '```' >> security-report.md
              echo "" >> security-report.md
            fi
            
            # API Key remediation
            if grep -q '"DetectorName":"Generic API Key"' scan-results/cleaned-results.json; then
              echo "### API Keys" >> security-report.md
              echo "" >> security-report.md
              echo "1. **Remove API keys** from your code files" >> security-report.md
              echo "2. **Store API keys** in environment variables" >> security-report.md
              echo "3. **Rotate exposed API keys** immediately" >> security-report.md
              echo "4. **Consider using a service like AWS Secrets Manager** for production" >> security-report.md
              echo "" >> security-report.md
            fi
            
            # General remediation advice
            echo "### General Security Practices" >> security-report.md
            echo "" >> security-report.md
            echo "1. **Never commit credentials** to your repository" >> security-report.md
            echo "2. **Use environment variables** for all sensitive configuration" >> security-report.md
            echo "3. **Add `.env` files to `.gitignore`** to prevent accidental commits" >> security-report.md
            echo "4. **Set up pre-commit hooks** to prevent committing secrets" >> security-report.md
            echo "5. **Implement secret rotation** policies for all credentials" >> security-report.md
          else
            echo "## ‚úÖ No security issues found" >> security-report.md
            echo "" >> security-report.md
            echo "No secrets or credentials were detected in this repository." >> security-report.md
          fi
          
      - name: Upload Detailed Results
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.repo.name }}-security-scan
          path: |
            scan-results/cleaned-results.json
            security-report.md
          retention-days: 30
  
  summary-report:
    name: üìä Security Summary
    needs: secret-scan
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-reports
          
      - name: Generate summary report
        run: |
          echo "# üîí Security Scan Summary" > security-summary.md
          echo "Generated: $(date)" >> security-summary.md
          echo "" >> security-summary.md
          
          FOUND_ISSUES=false
          
          # Process each repository
          for REPO in frontend backend; do
            RESULTS_FILE="all-reports/${REPO}-security-scan/cleaned-results.json"
            REPORT_FILE="all-reports/${REPO}-security-scan/security-report.md"
            
            echo "## ${REPO^} Repository" >> security-summary.md
            echo "" >> security-summary.md
            
            if [ -f "$RESULTS_FILE" ] && [ -s "$RESULTS_FILE" ] && [ "$(cat "$RESULTS_FILE" | grep -v "^$" | wc -l)" -gt 0 ]; then
              FOUND_ISSUES=true
              TOTAL=$(cat "$RESULTS_FILE" | grep -v "^$" | wc -l)
              VERIFIED=$(cat "$RESULTS_FILE" | grep -v "^$" | grep -c '"Verified":true' || echo "0")
              
              if [ "$VERIFIED" -gt 0 ]; then
                echo "‚ö†Ô∏è **Found $TOTAL potential secrets, including $VERIFIED verified credentials**" >> security-summary.md
              else
                echo "‚ö†Ô∏è **Found $TOTAL potential secrets (none verified)**" >> security-summary.md
              fi
              echo "" >> security-summary.md
              
              # Show top 3 locations with issues
              echo "### Where to Look:" >> security-summary.md
              cat "$RESULTS_FILE" | grep -v "^$" | while read -r line; do
                echo "$line" > temp_file.json
                if jq -e '.SourceMetadata.Data.Filesystem' temp_file.json > /dev/null 2>&1; then
                  FILE=$(jq -r '.SourceMetadata.Data.Filesystem.file' temp_file.json)
                  echo "$FILE"
                elif jq -e '.SourceMetadata.Data.Git' temp_file.json > /dev/null 2>&1; then
                  FILE=$(jq -r '.SourceMetadata.Data.Git.file' temp_file.json)
                  echo "$FILE"
                fi
              done | sort | uniq -c | sort -nr | head -3 | while read -r count file; do
                echo "- **$file** ($count issue(s))" >> security-summary.md
              done
              rm -f temp_file.json
              
              echo "" >> security-summary.md
              echo "### Issue Types:" >> security-summary.md
              cat "$RESULTS_FILE" | grep -v "^$" | while read -r line; do
                echo "$line" > temp_file.json
                DETECTOR=$(jq -r '.DetectorName' temp_file.json)
                echo "$DETECTOR"
              done | sort | uniq -c | sort -nr | while read -r count detector; do
                # Check if this detector type has any verified findings
                cat "$RESULTS_FILE" > check_file.json
                if grep -q "\"DetectorName\":\"$detector\"" check_file.json && grep -q "\"Verified\":true" check_file.json; then
                  echo "- üî¥ **$count $detector** (verified credentials found)" >> security-summary.md
                else
                  echo "- üü° $count $detector" >> security-summary.md
                fi
              done
              rm -f temp_file.json check_file.json
              
              echo "" >> security-summary.md
              echo "See detailed report in artifacts for specific file locations." >> security-summary.md
            else
              echo "‚úÖ No security issues found" >> security-summary.md
            fi
            echo "" >> security-summary.md
          done
          
          echo "## Next Steps" >> security-summary.md
          echo "" >> security-summary.md
          
          if [ "$FOUND_ISSUES" = true ]; then
            echo "### üö® Priority Actions" >> security-summary.md
            echo "" >> security-summary.md
            echo "1. **Download the detailed reports** from the artifacts" >> security-summary.md
            echo "2. **Take immediate action** on any verified credentials (marked üî¥)" >> security-summary.md
            echo "3. **Review all potential secrets** and confirm if they are real or false positives" >> security-summary.md
            echo "4. **Implement the recommended fixes** from the detailed reports" >> security-summary.md
          else
            echo "### ‚úÖ Maintain Security" >> security-summary.md
            echo "" >> security-summary.md
            echo "1. **Continue regular scanning** with this workflow" >> security-summary.md
            echo "2. **Set up pre-commit hooks** to prevent accidental secret commits" >> security-summary.md
            echo "3. **Train team members** on secure credential handling" >> security-summary.md
          fi
          
          echo "" >> security-summary.md
          echo "### üõ°Ô∏è Best Practices" >> security-summary.md
          echo "" >> security-summary.md
          echo "- **Store secrets in environment variables** or dedicated secret management systems" >> security-summary.md
          echo "- **Add sensitive files to .gitignore** (.env, config files with credentials)" >> security-summary.md
          echo "- **Use GitHub Secrets** for CI/CD credentials" >> security-summary.md
          echo "- **Implement regular credential rotation** as part of your security practice" >> security-summary.md
          
      - name: Upload Summary Report
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-summary
          path: security-summary.md
          retention-days: 30
