# GitHub Actions workflow for Terraform vulnerability scanning with Checkov
name: Terraform Security Scan

on:
  # Run on every push to any branch
  push:
  # Run on pull requests to main/master branches
  pull_request:
    branches: [ main, master ]

jobs:
  checkov-scan:
    name: Checkov Terraform Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for proper scanning
      
      # Debug: List all terraform files in the repository
      - name: List Terraform files
        run: |
          echo "Looking for all Terraform files in the repository:"
          find . -type f -name "*.tf" -o -name "*.tfvars" | sort
          echo "---"
          
      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install Checkov and dependencies
        run: |
          pip install checkov jq
      
      # Run Checkov scan against the entire repository
      - name: Run Checkov scan
        run: |
          # Create directory for results
          mkdir -p scan-results
          
          echo "Running Checkov scan on the entire repository"
          # Run without directory restrictions to scan the entire repository
          checkov --directory . --framework terraform --output cli --output json --output-file-path scan-results/results.json || true
          
          # Check if scan produced results
          if [ -f scan-results/results.json ]; then
            echo "Scan completed successfully"
            echo "Summary of findings:"
            jq -r '{"passed": .passed, "failed": .failed, "skipped": .skipped, "resource_count": .resource_count}' scan-results/results.json
          else
            echo "Scan did not produce a results file. Creating an empty one."
            echo '{"passed": 0, "failed": 0, "skipped": 0, "parsing_errors": 0, "resource_count": 0, "checkov_version": "3.2.408"}' > scan-results/results.json
          fi
      
      # Save results to workspace
      - name: Create scan summary
        run: |
          echo "## Checkov Terraform Security Scan Results" > scan-results/summary.md
          echo "Scan completed at $(date)" >> scan-results/summary.md
          
          # Check if file exists and is a file (not a directory)
          if [ -f scan-results/results.json ]; then
            echo "Processing results from scan-results/results.json"
            
            # Extract counts
            PASSED=$(jq -r '.passed // 0' scan-results/results.json)
            FAILED=$(jq -r '.failed // 0' scan-results/results.json)
            SKIPPED=$(jq -r '.skipped // 0' scan-results/results.json)
            RESOURCES=$(jq -r '.resource_count // 0' scan-results/results.json)
            TOTAL=$((PASSED + FAILED + SKIPPED))
            
            echo "- **Total resources:** $RESOURCES" >> scan-results/summary.md
            echo "- **Total checks:** $TOTAL" >> scan-results/summary.md
            echo "- **Passed checks:** $PASSED" >> scan-results/summary.md
            echo "- **Failed checks:** $FAILED" >> scan-results/summary.md
            echo "- **Skipped checks:** $SKIPPED" >> scan-results/summary.md
            
            # Extract and list failed checks if any
            if [ $FAILED -gt 0 ] && jq -e '.results' scan-results/results.json > /dev/null 2>&1; then
              echo "### Failed Security Checks:" >> scan-results/summary.md
              jq -r '.results[] | select(.check_result == "FAILED") | "- **" + .check_id + "**: " + .check_name + " in " + .file_path' scan-results/results.json >> scan-results/summary.md 2>/dev/null || echo "- Error extracting detailed results" >> scan-results/summary.md
            fi
          else
            echo "- **No Terraform files found or no results generated**" >> scan-results/summary.md
            echo "- Make sure your repository contains Terraform (*.tf, *.tfvars) files" >> scan-results/summary.md
          fi
          
          cat scan-results/summary.md
      
      # Run a special full scan with all frameworks just to be safe
      - name: Run comprehensive scan
        run: |
          echo "Running comprehensive scan with all supported frameworks"
          
          # Run checkov with all frameworks to catch everything
          checkov --directory . --output cli --output json --output-file-path scan-results/full-results.json || true
          
          if [ -f scan-results/full-results.json ]; then
            echo "Comprehensive scan completed successfully"
            echo "Summary of comprehensive findings:"
            jq -r '{"passed": .passed, "failed": .failed, "skipped": .skipped, "resource_count": .resource_count}' scan-results/full-results.json
            
            # Add to summary
            echo "## Comprehensive Scan Results (All IaC)" >> scan-results/summary.md
            PASSED=$(jq -r '.passed // 0' scan-results/full-results.json)
            FAILED=$(jq -r '.failed // 0' scan-results/full-results.json)
            RESOURCES=$(jq -r '.resource_count // 0' scan-results/full-results.json)
            
            echo "- **Total resources:** $RESOURCES" >> scan-results/summary.md
            echo "- **Passed checks:** $PASSED" >> scan-results/summary.md  
            echo "- **Failed checks:** $FAILED" >> scan-results/summary.md
            
            cat scan-results/summary.md
          else
            echo "Comprehensive scan did not produce results"
          fi
      
      # Report findings but don't fail the pipeline
      - name: Report security issues
        run: |
          HIGH_SEVERITY_TF=0
          HIGH_SEVERITY_ALL=0
          
          if [ -f scan-results/results.json ]; then
            HIGH_SEVERITY_TF=$(jq -r '.results[] | select(.check_result == "FAILED" and .severity == "HIGH") | .check_id' scan-results/results.json 2>/dev/null | wc -l || echo 0)
          fi
          
          if [ -f scan-results/full-results.json ]; then
            HIGH_SEVERITY_ALL=$(jq -r '.results[] | select(.check_result == "FAILED" and .severity == "HIGH") | .check_id' scan-results/full-results.json 2>/dev/null | wc -l || echo 0)
          fi
            
          if [ "$HIGH_SEVERITY_TF" -gt 0 ] || [ "$HIGH_SEVERITY_ALL" -gt 0 ]; then
            echo "Warning: High severity security issues found in the codebase, but continuing build."
            echo "- Terraform-specific high severity issues: $HIGH_SEVERITY_TF"
            echo "- Total high severity issues (all IaC): $HIGH_SEVERITY_ALL"
          else
            echo "No high severity issues found."
          fi
